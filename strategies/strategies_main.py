# strategies_main.py ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

import asyncio
import asyncpg
import redis.asyncio as redis
import os
import json
from datetime import datetime

# --- –ë–ª–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ---
import vilarso_m5_flex
import lx_m5_strict
from vl_m1_flex import VlM1FlexStrategy

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
DATABASE_URL = os.getenv("DATABASE_URL")
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
running_strategies = {}  # –∏–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ -> –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
strategy_tickers_map = {}  # strategy_id -> set of ticker_ids

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---
async def get_db():
    return await asyncpg.connect(DATABASE_URL)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ---
async def load_strategies():
    conn = await get_db()
    rows = await conn.fetch("""
        SELECT id, name, enabled, use_all_tickers
        FROM strategies
        WHERE enabled = true
    """)
    await conn.close()
    return [dict(r) for r in rows]

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º ---
async def load_strategy_tickers():
    conn = await get_db()
    rows = await conn.fetch("""
        SELECT strategy_id, ticker_id
        FROM strategy_tickers
        WHERE enabled = true
    """)
    await conn.close()
    mapping = {}
    for r in rows:
        mapping.setdefault(r["strategy_id"], set()).add(r["ticker_id"])
    return mapping

# --- –°—Ç–∞—Ä—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ---
async def start_active_strategies():
    global strategy_tickers_map

    print("[strategies_main] üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
    strategy_infos = await load_strategies()
    strategy_tickers_map = await load_strategy_tickers()

    for strategy_info in strategy_infos:
        strategy_id = strategy_info["id"]
        strategy_name = strategy_info["name"]

        # –ó–¥–µ—Å—å —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        if strategy_name == "VL_M1_FLEX":
            strategy = VlM1FlexStrategy(strategy_id=strategy_id)
            asyncio.create_task(strategy.main_loop())
            running_strategies[strategy_name] = strategy
            print(f"[strategies_main] ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –∑–∞–ø—É—â–µ–Ω–∞")
        
        # —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –±—É–¥—É—â–µ–º
        # elif strategy_name == "VILARSO_M5_FLEX":
        #     strategy = VilarsoM5FlexStrategy(...)
        #     asyncio.create_task(strategy.main_loop())
        #     running_strategies[strategy_name] = strategy

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ ---
async def handle_signal(signal_log_id: int):
    try:
        print(f"[strategies_main] üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ signal_log_id={signal_log_id}", flush=True)
        conn = await get_db()
        row = await conn.fetchrow("""
            SELECT s.name
            FROM signal_log_entries sle
            JOIN strategies s ON s.id = sle.strategy_id
            WHERE sle.log_id = $1
            LIMIT 1
        """, signal_log_id)
        await conn.close()

        if not row:
            print(f"[strategies_main] ‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è signal_log_id={signal_log_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", flush=True)
            return

        strategy_name = row["name"]

        if strategy_name in running_strategies:
            strategy = running_strategies[strategy_name]
            await strategy.on_signal(signal_log_id)
        else:
            print(f"[strategies_main] ‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", flush=True)

    except Exception as e:
        print(f"[strategies_main] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}", flush=True)
        
# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def main():
    print("[strategies_main] üìã –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", flush=True)

    await start_active_strategies()

    print("[strategies_main] ‚úÖ –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã", flush=True)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    redis_conn = redis.Redis(
        host=REDIS_HOST,
        port=REDIS_PORT,
        password=REDIS_PASSWORD,
        ssl=True
    )

    pubsub = redis_conn.pubsub()
    await pubsub.subscribe("signal_logs_ready")

    print("[strategies_main] üì° –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...", flush=True)

    async for message in pubsub.listen():
        if message['type'] != 'message':
            continue

        raw_data = message['data']

        # üí° –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
        if isinstance(raw_data, bytes):
            raw_data = raw_data.decode('utf-8')

        try:
            payload = json.loads(raw_data)

            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            if isinstance(payload, dict):
                signal_log_id = payload.get("signal_log_id")
            elif isinstance(payload, int):
                signal_log_id = payload
            else:
                print(f"[strategies_main] ‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–≥–Ω–∞–ª–∞: {payload}")
                continue

            if signal_log_id:
                await handle_signal(signal_log_id)

        except Exception as e:
            print(f"[strategies_main] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}", flush=True)

if __name__ == "__main__":
    asyncio.run(main())
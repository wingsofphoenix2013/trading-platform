# feed_main.py ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫–∏ + Redis Pub/Sub + –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ë–î

print("üî• FEED STARTED", flush=True)

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio
import json
import os
from datetime import datetime
import websockets
import redis.asyncio as redis
import asyncpg

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (Upstash) —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
r = redis.Redis(
    host=os.getenv("REDIS_HOST"),
    port=int(os.getenv("REDIS_PORT", 6379)),
    password=os.getenv("REDIS_PASSWORD"),
    ssl=True
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
async def get_enabled_tickers():
    db_url = os.getenv("DATABASE_URL")
    try:
        conn = await asyncpg.connect(dsn=db_url)
        rows = await conn.fetch("SELECT symbol FROM tickers WHERE status = 'enabled'")
        await conn.close()
        return [row["symbol"] for row in rows]
    except Exception as e:
        print(f"[ERROR] DB connection failed: {e}", flush=True)
        return []

# –ó–∞–ø–∏—Å—å —Å–≤–µ—á–∏ M1 –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def save_m1_candle(symbol, kline):
    db_url = os.getenv("DATABASE_URL")
    try:
        conn = await asyncpg.connect(dsn=db_url)
        await conn.execute("""
            INSERT INTO ohlcv_m1 (symbol, open_time, open, high, low, close, volume)
            VALUES ($1, to_timestamp(CAST($2 AS DOUBLE PRECISION) / 1000), $3, $4, $5, $6, $7)
        """,
            symbol,
            kline["t"], kline["o"], kline["h"],
            kline["l"], kline["c"], kline["v"]
        )
        await conn.close()
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ M1-—Å–≤–µ—á–∏: {e}", flush=True)
        
# üß© –ê–≥—Ä–µ–≥–∞—Ü–∏—è M5-—Å–≤–µ—á–µ–π –∏–∑ M1 —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ñ–ª–∞–≥–∞ complete –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –≤ Redis
async def aggregate_m5_candles():
    db_url = os.getenv("DATABASE_URL")

    while True:
        now = datetime.utcnow()
        if now.minute % 5 == 0 and now.second < 5:
            try:
                conn = await asyncpg.connect(dsn=db_url)
                for symbol in active_tickers.keys():
                    rows = await conn.fetch("""
                        SELECT * FROM ohlcv_m1
                        WHERE symbol = $1
                        ORDER BY open_time DESC
                        LIMIT 5
                    """, symbol)

                    if len(rows) == 5:
                        rows = sorted(rows, key=lambda r: r["open_time"])
                        open_time = rows[0]["open_time"]
                        open = rows[0]["open"]
                        high = max(r["high"] for r in rows)
                        low = min(r["low"] for r in rows)
                        close = rows[-1]["close"]
                        volume = sum(r["volume"] for r in rows)

                        # –í—Å—Ç–∞–≤–∫–∞ —Å–≤–µ—á–∏ M5 —Å —Ñ–ª–∞–≥–æ–º complete = TRUE
                        await conn.execute("""
                            INSERT INTO ohlcv_m5 (symbol, open_time, open, high, low, close, volume, complete)
                            VALUES ($1, $2, $3, $4, $5, $6, $7, TRUE)
                        """, symbol, open_time, open, high, low, close, volume)

                        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–≤–µ—á–∏ –≤ Redis
                        message = {
                            "symbol": symbol,
                            "timestamp": open_time.isoformat()
                        }
                        await r.publish("ohlcv_m5_complete", json.dumps(message))

                await conn.close()

            except Exception as e:
                print(f"[ERROR] –ê–≥—Ä–µ–≥–∞—Ü–∏—è M5: {e}", flush=True)

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å —à–∞–≥–æ–º –≤ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
# –ê–≥—Ä–µ–≥–∞—Ü–∏—è M15-—Å–≤–µ—á–µ–π –∏–∑ M1
async def aggregate_m15_candles():
    db_url = os.getenv("DATABASE_URL")

    while True:
        now = datetime.utcnow()
        if now.minute % 15 == 0 and now.second < 5:
            try:
                conn = await asyncpg.connect(dsn=db_url)
                for symbol in active_tickers.keys():
                    rows = await conn.fetch("""
                        SELECT * FROM ohlcv_m1
                        WHERE symbol = $1
                        ORDER BY open_time DESC
                        LIMIT 15
                    """, symbol)

                    if len(rows) == 15:
                        rows = sorted(rows, key=lambda r: r["open_time"])
                        open_time = rows[0]["open_time"]
                        open = rows[0]["open"]
                        high = max(r["high"] for r in rows)
                        low = min(r["low"] for r in rows)
                        close = rows[-1]["close"]
                        volume = sum(r["volume"] for r in rows)

                        await conn.execute("""
                            INSERT INTO ohlcv_m15 (symbol, open_time, open, high, low, close, volume)
                            VALUES ($1, $2, $3, $4, $5, $6, $7)
                        """, symbol, open_time, open, high, low, close, volume)

                await conn.close()
            except Exception as e:
                print(f"[ERROR] –ê–≥—Ä–µ–≥–∞—Ü–∏—è M15: {e}", flush=True)

        await asyncio.sleep(5)
# –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
active_tickers = {}

# –ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket-–ø–æ—Ç–æ–∫–∏ –ø–æ —Ç–∏–∫–µ—Ä—É
async def subscribe_ticker(symbol):
    if symbol in active_tickers:
        print(f"[INFO] {symbol} —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω", flush=True)
        return

    print(f"[INFO] –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {symbol}", flush=True)

    async def mark_price():
        url = f"wss://fstream.binance.com/ws/{symbol.lower()}@markPrice"
        async for ws in websockets.connect(url):
            try:
                async for message in ws:
                    data = json.loads(message)
                    price = data.get("p")
                    if price:
                        pass # –ª–æ–≥–∏ –ø–æ mark price –æ—Ç–∫–ª—é—á–µ–Ω—ã
            except websockets.ConnectionClosed:
                print(f"[MARK PRICE] reconnecting: {symbol}", flush=True)
                continue

    async def m1_kline():
        url = f"wss://fstream.binance.com/ws/{symbol.lower()}@kline_1m"
        async for ws in websockets.connect(url):
            try:
                async for message in ws:
                    data = json.loads(message)
                    k = data.get("k", {})
                    if k and k.get("x"):
                        print(f"[M1 CANDLE] {datetime.utcnow()} - {symbol}: O:{k['o']} H:{k['h']} L:{k['l']} C:{k['c']}", flush=True)
                        await save_m1_candle(symbol, k)
            except websockets.ConnectionClosed:
                print(f"[KLINE] reconnecting: {symbol}", flush=True)
                continue

    task1 = asyncio.create_task(mark_price())
    task2 = asyncio.create_task(m1_kline())
    active_tickers[symbol] = (task1, task2)

# –°–ª—É—à–∞–µ—Ç Redis –∫–∞–Ω–∞–ª –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ
async def redis_listener():
    pubsub = r.pubsub()
    await pubsub.subscribe("ticker_activation")
    print("[REDIS] –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª 'ticker_activation'", flush=True)

    async for message in pubsub.listen():
        if message["type"] == "message":
            try:
                data = json.loads(message["data"])
                if data.get("action") == "activate":
                    symbol = data.get("symbol", "").upper()
                    if symbol:
                        await subscribe_ticker(symbol)
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", flush=True)

# –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –∏–∑ –ë–î + —Å–ª—É—à–∞–µ–º Redis
async def main():
    print("[MAIN] Feed module running", flush=True)

    symbols = await get_enabled_tickers()
    print(f"[MAIN] –¢–∏–∫–µ—Ä–æ–≤ –∏–∑ –ë–î –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {symbols}", flush=True)
    for symbol in symbols:
        await subscribe_ticker(symbol)

    # –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ M5
    asyncio.create_task(aggregate_m5_candles())
    
    # –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ú15
    asyncio.create_task(aggregate_m15_candles())

    # –°–ª—É—à–∞–µ–º Redis –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    await redis_listener()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–æ–¥—É–ª—å: –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
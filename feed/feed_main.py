# feed/main.py ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫–∏ + Redis Pub/Sub + –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ë–î

print("üî• FEED STARTED", flush=True)

# 1Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio
import json
import os
from datetime import datetime
import websockets
import redis.asyncio as redis
import asyncpg

# 2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (Upstash) —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
r = redis.Redis(
    host=os.getenv("REDIS_HOST"),
    port=int(os.getenv("REDIS_PORT", 6379)),
    password=os.getenv("REDIS_PASSWORD"),
    ssl=True
)

# 3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
async def get_enabled_tickers():
    db_url = os.getenv("DATABASE_URL")
    try:
        conn = await asyncpg.connect(dsn=db_url)
        rows = await conn.fetch("SELECT symbol FROM tickers WHERE status = 'enabled'")
        await conn.close()
        return [row["symbol"] for row in rows]
    except Exception as e:
        print(f"[ERROR] DB connection failed: {e}", flush=True)
        return []

# 4Ô∏è‚É£ –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
active_tickers = {}

# 5Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket-–ø–æ—Ç–æ–∫–∏ –ø–æ —Ç–∏–∫–µ—Ä—É
async def subscribe_ticker(symbol):
    if symbol in active_tickers:
        print(f"[INFO] {symbol} —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω", flush=True)
        return

    print(f"[INFO] –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {symbol}", flush=True)

    async def mark_price():
        url = f"wss://fstream.binance.com/ws/{symbol.lower()}@markPrice"
        async for ws in websockets.connect(url):
            try:
                async for message in ws:
                    data = json.loads(message)
                    price = data.get("p")
                    if price:
                        pass # –ª–æ–≥–∏ –ø–æ mark price –æ—Ç–∫–ª—é—á–µ–Ω—ã
            except websockets.ConnectionClosed:
                print(f"[MARK PRICE] reconnecting: {symbol}", flush=True)
                continue

    async def m1_kline():
        url = f"wss://fstream.binance.com/ws/{symbol.lower()}@kline_1m"
        async for ws in websockets.connect(url):
            try:
                async for message in ws:
                    data = json.loads(message)
                    k = data.get("k", {})
                    if k and k.get("x"):
                        print(f"[M1 CANDLE] {datetime.utcnow()} - {symbol}: O:{k['o']} H:{k['h']} L:{k['l']} C:{k['c']}", flush=True)
            except websockets.ConnectionClosed:
                print(f"[KLINE] reconnecting: {symbol}", flush=True)
                continue

    task1 = asyncio.create_task(mark_price())
    task2 = asyncio.create_task(m1_kline())
    active_tickers[symbol] = (task1, task2)

# 6Ô∏è‚É£ –°–ª—É—à–∞–µ—Ç Redis –∫–∞–Ω–∞–ª –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ
async def redis_listener():
    pubsub = r.pubsub()
    await pubsub.subscribe("ticker_activation")
    print("[REDIS] –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª 'ticker_activation'", flush=True)

    async for message in pubsub.listen():
        if message["type"] == "message":
            try:
                data = json.loads(message["data"])
                if data.get("action") == "activate":
                    symbol = data.get("symbol", "").upper()
                    if symbol:
                        await subscribe_ticker(symbol)
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", flush=True)

# 7Ô∏è‚É£ –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –∏–∑ –ë–î + —Å–ª—É—à–∞–µ–º Redis
async def main():
    print("[MAIN] Feed module running", flush=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ë–î
    symbols = await get_enabled_tickers()
    print(f"[MAIN] –¢–∏–∫–µ—Ä–æ–≤ –∏–∑ –ë–î –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {symbols}", flush=True)
    for symbol in symbols:
        await subscribe_ticker(symbol)

    # –°–ª—É—à–∞–µ–º Redis –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    await redis_listener()

# 8Ô∏è‚É£ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–æ–¥—É–ª—å: –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
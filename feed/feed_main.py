# feed/main.py ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫–∏ + Redis Pub/Sub + –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ë–î
# 1. –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio
import json
import os
from datetime import datetime
import websockets
import redis.asyncio as redis
import asyncpg

# 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (Upstash) —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
r = redis.Redis(
    host=os.getenv("REDIS_HOST"),
    port=int(os.getenv("REDIS_PORT", 6379)),
    password=os.getenv("REDIS_PASSWORD"),
    ssl=True
)

# 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

import psycopg2
from urllib.parse import urlparse

try:
    db_url = os.getenv("DATABASE_URL")
    pg_conn = psycopg2.connect(db_url)
    print("[PG] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", flush=True)
except Exception as e:
    print(f"[PG] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}", flush=True)
    pg_conn = None

# 4. –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
active_tickers = {}

# 5. –ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket-–ø–æ—Ç–æ–∫–∏ –ø–æ —Ç–∏–∫–µ—Ä—É

async def subscribe_ticker(symbol):
    if symbol in active_tickers:
        print(f"[INFO] {symbol} —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω", flush=True)
        return

    print(f"[INFO] –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {symbol}", flush=True)

    async def mark_price():
        url = f"wss://fstream.binance.com/ws/{symbol.lower()}@markPrice"
        async for ws in websockets.connect(url):
            try:
                async for message in ws:
                    data = json.loads(message)
                    price = data.get("p")
                    if price:
                        pass  # –ª–æ–≥–∏ –ø–æ mark price –æ—Ç–∫–ª—é—á–µ–Ω—ã
            except websockets.ConnectionClosed:
                print(f"[MARK PRICE] reconnecting: {symbol}", flush=True)
                continue

    async def m1_kline():
        url = f"wss://fstream.binance.com/ws/{symbol.lower()}@kline_1m"
        async for ws in websockets.connect(url):
            try:
                async for message in ws:
                    data = json.loads(message)
                    k = data.get("k", {})
                    if k and k.get("x"):
                        print(f"[M1 CANDLE] {datetime.utcnow()} - {symbol}: O:{k['o']} H:{k['h']} L:{k['l']} C:{k['c']}", flush=True)
                        save_m1_candle_with_diagnostics(pg_conn, data)
            except websockets.ConnectionClosed:
                print(f"[KLINE] reconnecting: {symbol}", flush=True)
                continue

    task1 = asyncio.create_task(mark_price())
    task2 = asyncio.create_task(m1_kline())
    active_tickers[symbol] = (task1, task2)

# 6. –°–ª—É—à–∞–µ—Ç Redis –∫–∞–Ω–∞–ª –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ
async def redis_listener():
    pubsub = r.pubsub()
    await pubsub.subscribe("ticker_activation")
    print("[REDIS] –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª 'ticker_activation'", flush=True)

    async for message in pubsub.listen():
        if message["type"] == "message":
            try:
                data = json.loads(message["data"])
                if data.get("action") == "activate":
                    symbol = data.get("symbol", "").upper()
                    if symbol:
                        await subscribe_ticker(symbol)
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", flush=True)


# 8. –ó–∞–ø–∏—Å—å M1-—Å–≤–µ—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π

def save_m1_candle_with_diagnostics(conn, candle: dict):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∏–Ω—É—Ç–Ω—É—é —Å–≤–µ—á—É –≤ —Ç–∞–±–ª–∏—Ü—É ohlcv_m1, –ø—Ä–æ–≤–µ—Ä—è—è –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ missing_previous, –∞ —Ç–∞–∫–∂–µ source –∏ aggregated.
    """
    import psycopg2
    from psycopg2.extras import RealDictCursor
    from datetime import datetime, timedelta

    try:
        symbol = candle["s"]
        kline = candle["k"]
        open_time_ms = kline["t"]
        open_time = datetime.utcfromtimestamp(open_time_ms / 1000).replace(second=0, microsecond=0)
        previous_time = open_time - timedelta(minutes=1)

        open_price = float(kline["o"])
        high_price = float(kline["h"])
        low_price = float(kline["l"])
        close_price = float(kline["c"])
        volume = float(kline["v"])
        inserted_at = datetime.utcnow()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            cur.execute(
                "SELECT 1 FROM ohlcv_m1 WHERE symbol = %s AND open_time = %s",
                (symbol, previous_time)
            )
            missing_previous = cur.fetchone() is None

        print(f"[M1] –í—Å—Ç–∞–≤–∫–∞ —Å–≤–µ—á–∏ {symbol} @ {open_time} | missing_previous = {missing_previous}", flush=True)

        # –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
        with conn.cursor() as cur:
            cur.execute(
                """
                INSERT INTO ohlcv_m1 (
                    symbol, open_time, open, high, low, close, volume,
                    inserted_at, missing_previous, aggregated, source
                )
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (symbol, open_time) DO NOTHING
                """,
                (
                    symbol, open_time, open_price, high_price, low_price, close_price, volume,
                    inserted_at, missing_previous, False, 'stream'
                )
            )
            conn.commit()

        print(f"[M1] ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {symbol} @ {open_time}", flush=True)

    except Exception as e:
        print(f"[M1] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–≤–µ—á–∏: {e}", flush=True)
        
# X. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–æ–¥—É–ª—å: –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
async def main():
    print("üî• FEED STARTED", flush=True)
    await listen_redis_channel()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

# indicators_main.py ‚Äî –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞—Å—á—ë—Ç–∞ LR (–®–∞–≥ 3), —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏

import asyncio
import os
import asyncpg
import redis.asyncio as redis
import json
import pandas as pd
import numpy as np
from datetime import datetime
from math import atan, degrees

REDIS_CHANNEL_IN = 'ohlcv_m5_complete'
print("üöÄ INDICATORS WORKER STARTED", flush=True)

async def main():
    # –®–∞–≥ 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –∏ PostgreSQL
    print("[INIT] Connecting to Redis...", flush=True)
    try:
        redis_client = redis.Redis(
            host=os.getenv("REDIS_HOST"),
            port=int(os.getenv("REDIS_PORT", 6379)),
            password=os.getenv("REDIS_PASSWORD"),
            db=0,
            decode_responses=True,
            ssl=True
        )
        await redis_client.ping()
        print("[OK] Connected to Redis", flush=True)

        pubsub = redis_client.pubsub()
        await pubsub.subscribe(REDIS_CHANNEL_IN)
        print(f"[INIT] Subscribed to Redis channel: {REDIS_CHANNEL_IN}", flush=True)
    except Exception as e:
        print(f"[ERROR] Redis connection or subscription failed: {e}", flush=True)
        return

    print("[INIT] Connecting to PostgreSQL...", flush=True)
    try:
        pg_conn = await asyncpg.connect(
            user=os.getenv("PG_USER"),
            password=os.getenv("PG_PASSWORD"),
            host=os.getenv("PG_HOST"),
            port=os.getenv("PG_PORT", "5432"),
            database=os.getenv("PG_NAME")
        )
        print("[OK] Connected to PostgreSQL", flush=True)
    except Exception as e:
        print(f"[ERROR] Failed to connect PostgreSQL: {e}", flush=True)
        return

    # –®–∞–≥ 2. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Redis –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    async for message in pubsub.listen():
        if message['type'] != 'message':
            continue

        try:
            data = json.loads(message['data'])
            symbol = data.get("symbol")
            ts_str = data.get("timestamp")
            print(f"[REDIS] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: symbol={symbol}, timestamp={ts_str}", flush=True)

            # –ó–∞–≥—Ä—É–∑–∫–∞ 100 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
            query_candles = """
                SELECT open_time AS timestamp, open, high, low, close, volume
                FROM ohlcv_m5
                WHERE symbol = $1 AND complete = true
                ORDER BY open_time DESC
                LIMIT 100
            """
            rows = await pg_conn.fetch(query_candles, symbol)
            if not rows or len(rows) < 20:
                print(f"[SKIP] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} ({len(rows)} —Å–≤–µ—á–µ–π)", flush=True)
                continue

            df = pd.DataFrame(rows, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = df[col].astype(float)
            df = df.sort_values('timestamp')
            print(f"[DATA] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}", flush=True)

            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            query_settings = "SELECT indicator, param, value FROM indicator_settings"
            rows = await pg_conn.fetch(query_settings)
            settings = {}
            for row in rows:
                indicator = row['indicator']
                param = row['param']
                value = float(row['value'])
                if indicator not in settings:
                    settings[indicator] = {}
                settings[indicator][param] = value
            print(f"[DATA] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {settings}", flush=True)

            # –ó–∞–≥—Ä—É–∑–∫–∞ precision_price
            query_precision = "SELECT precision_price FROM tickers WHERE symbol = $1"
            precision_row = await pg_conn.fetchrow(query_precision, symbol)
            precision_digits = int(precision_row['precision_price']) if precision_row else 2
            print(f"[DATA] –¢–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω –¥–ª—è {symbol}: {precision_digits} –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π", flush=True)

            # –®–∞–≥ 3. –†–∞—Å—á—ë—Ç –ª–∏–Ω–µ–π–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (LR)
            try:
                lr_length = int(settings.get('lr', {}).get('length', 50))
                angle_up = settings.get('lr', {}).get('angle_up', 2)
                angle_down = settings.get('lr', {}).get('angle_down', -2)

                if len(df) < lr_length:
                    raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LR: –Ω—É–∂–Ω–æ {lr_length}, –µ—Å—Ç—å {len(df)}")

                lr_df = df.tail(lr_length).copy()
                x = np.arange(lr_length)
                y = lr_df['close'].values

                coef = np.polyfit(x, y, 1)
                slope = coef[0]
                intercept = coef[1]
                regression_line = slope * x + intercept

                norm_slope = slope / np.mean(y)
                angle_deg = round(degrees(atan(norm_slope)), 2)

                if angle_deg > angle_up:
                    trend = 'up'
                elif angle_deg < angle_down:
                    trend = 'down'
                else:
                    trend = 'flat'

                std_dev = np.std(y - regression_line)
                lr_mid = round(regression_line[-1], precision_digits)
                lr_upper = round(regression_line[-1] + 2 * std_dev, precision_digits)
                lr_lower = round(regression_line[-1] - 2 * std_dev, precision_digits)

                print(f"[LR] {symbol}: —É–≥–æ–ª={angle_deg}¬∞, —Ç—Ä–µ–Ω–¥={trend}, —Å–µ—Ä–µ–¥–∏–Ω–∞={lr_mid}, –≤–µ—Ä—Ö={lr_upper}, –Ω–∏–∑={lr_lower}", flush=True)

            except Exception as e:
                print(f"[ERROR] LR calculation failed for {symbol}: {e}", flush=True)

        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", flush=True)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("[STOP] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é", flush=True)

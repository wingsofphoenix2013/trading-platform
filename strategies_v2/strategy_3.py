import logging
import os
import redis.asyncio as redis
from decimal import Decimal, ROUND_DOWN

class Strategy3:
    def __init__(self, interface):
        self.interface = interface

    async def on_signal(self, signal):
        logging.info(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Ññ1 –ø–æ–ª—É—á–∏–ª–∞ —Å–∏–≥–Ω–∞–ª: {signal}")

        params = await self.load_params()
        if not params:
            message = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
            logging.error(message)
            await self.interface.log_strategy_action(
                log_id=signal['log_id'],
                strategy_id=None,
                status='ignored_by_check',
                note=message
            )
            return

        direction = signal['direction']

        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –î–û –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã!
        checks_passed, message = await self.interface.perform_basic_checks(params, signal['symbol'], direction)
        if not checks_passed:
            logging.warning(f"–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {message}")
            await self.interface.log_strategy_action(
                log_id=signal['log_id'],
                strategy_id=params['id'],
                status='ignored_by_check',
                note=message
            )
            return

        current_price = await self.get_current_price(signal['symbol'])
        if not current_price:
            message = f"–ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {signal['symbol']}"
            logging.warning(message)
            await self.interface.log_strategy_action(
                log_id=signal['log_id'],
                strategy_id=params['id'],
                status='ignored_by_check',
                note=message
            )
            return

        checks_passed = await self.run_checks(params, signal, current_price)
        if not checks_passed:
            message = "–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"
            logging.warning(message)
            await self.interface.log_strategy_action(
                log_id=signal['log_id'],
                strategy_id=params['id'],
                status='ignored_by_check',
                note=message
            )
            return

        await self.open_position(params, signal, current_price)
        
    # –ú–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async def load_params(self):
        params = await self.interface.get_strategy_params('test-3')
        if not params:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")
        else:
            logging.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {params}")
        return params

    # –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏–∑ Redis
    async def get_current_price(self, symbol):
        redis_client = redis.Redis(
            host=os.getenv("REDIS_HOST"),
            port=int(os.getenv("REDIS_PORT")),
            password=os.getenv("REDIS_PASSWORD"),
            decode_responses=True,
            ssl=True
        )
        price_str = await redis_client.get(f"price:{symbol}")
        await redis_client.close()

        if not price_str:
            logging.warning(f"–ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {symbol}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return None

        try:
            price = Decimal(price_str)
            return price
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ Redis –≤ Decimal –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {symbol}: {e}")
            return None
        
    # –ú–µ—Ç–æ–¥ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (EMA50/ATR + lr_trend)
    async def run_checks(self, params, signal, current_price):
        ema, atr = await self.interface.get_ema_atr(signal['symbol'], params['timeframe'])

        if ema is None or atr is None:
            logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (EMA50 –∏–ª–∏ ATR) –¥–ª—è {signal['symbol']}.")
            return False

        direction = signal['direction']
        phrase = signal['phrase']

        # --- EMA/ATR —É—Å–ª–æ–≤–∏–µ ---
        if 'LONG' in phrase:
            condition = current_price >= (ema - Decimal('0.5') * atr)
            message = (
                f"–¶–µ–Ω–∞ {current_price} –Ω–∏–∂–µ —Ç—Ä–µ–±—É–µ–º–æ–π {(ema - Decimal('0.5') * atr)}. –í—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω."
                if not condition else "–õ–æ–Ω–≥ –≤—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω."
            )
        elif 'SHORT' in phrase:
            condition = current_price <= (ema + Decimal('0.5') * atr)
            message = (
                f"–¶–µ–Ω–∞ {current_price} –≤—ã—à–µ —Ç—Ä–µ–±—É–µ–º–æ–π {(ema + Decimal('0.5') * atr)}. –í—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω."
                if not condition else "–®–æ—Ä—Ç –≤—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω."
            )
        else:
            logging.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞.")
            return False

        if not condition:
            logging.warning(message)
            return False

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ lr_trend ---
        lr = await self.interface.get_lr_params(signal['symbol'], params['timeframe'])
        if lr is None or lr.get("lr_trend") is None:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å lr_trend –¥–ª—è {signal['symbol']}. –í—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
            return False

        lr_trend = lr["lr_trend"]

        if direction == "short" and lr_trend != Decimal("-1"):
            logging.warning(f"lr_trend = {lr_trend}, –æ–∂–∏–¥–∞–ª–æ—Å—å -1 –¥–ª—è SHORT. –í—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
            return False

        if direction == "long" and lr_trend != Decimal("1"):
            logging.warning(f"lr_trend = {lr_trend}, –æ–∂–∏–¥–∞–ª–æ—Å—å 1 –¥–ª—è LONG. –í—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
            return False

        logging.info("–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (EMA/ATR + lr_trend) –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
        return True
        
    # –ú–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (—Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π)
    async def open_position(self, params, signal, current_price):
        direction = signal['direction']
        position_size = await self.interface.calculate_position_size(params, signal['symbol'], current_price)

        if not position_size:
            logging.warning("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏.")
            await self.interface.log_strategy_action(
                log_id=signal['log_id'],
                strategy_id=params['id'],
                status='ignored_by_check',
                note='–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏'
            )
            return

        logging.info(
            f"–†–∞—Å—á—ë—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {signal['symbol']}: {position_size} –ø–æ —Ü–µ–Ω–µ {current_price} USDT "
            f"(–æ–±—â–∞—è —Å—É–º–º–∞ {Decimal(position_size) * Decimal(current_price)} USDT)"
        )

        position_id = await self.interface.open_virtual_position(
            strategy_id=params['id'],
            log_id=signal['log_id'],
            symbol=signal['symbol'],
            direction=direction,
            entry_price=current_price,
            quantity=position_size
        )
            
        if position_id:
            entry_price = await self.interface.get_entry_price(position_id)
            
            logging.info(f"–ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ —Å ID={position_id}")

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            await self.interface.log_strategy_action(
                log_id=signal['log_id'],
                strategy_id=params['id'],
                status='position_opened',
                position_id=position_id,
                note=f"–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {signal['symbol']}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}, qty={position_size}, —Ü–µ–Ω–∞={current_price}"
            )

            ema, atr = await self.interface.get_ema_atr(signal['symbol'], params['timeframe'])
            if not atr:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ATR –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ TP/SL.")
                return

            targets = await self.calculate_tp_sl(
                symbol=signal['symbol'],
                direction=direction,
                entry_price=current_price,
                quantity=position_size,
                atr=atr
            )

            await self.interface.create_position_targets(position_id, targets)

            # üî• –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –Ω–∞–≤–µ—Ä–Ω–æ–µ
            position_data = {
                "symbol": signal['symbol'],
                "direction": direction,
                "entry_price": entry_price,
                "quantity_left": position_size,
                "strategy_id": params['id'],
                "strategy_name": "test-3",
                "targets": targets
            }
            self.interface.register_position_in_memory(
                self.interface.open_positions,
                position_id,
                position_data
            )

        else:
            logging.error("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏!")
            await self.interface.log_strategy_action(
                log_id=signal['log_id'],
                strategy_id=params['id'],
                status='ignored_by_check',
                note='–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏'
            )
            
    # –ú–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ —É—Ä–æ–≤–Ω–µ–π TP –∏ SL –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Ññ1)
    async def calculate_tp_sl(self, symbol, direction, entry_price, quantity, atr):
        precision = await self.interface.get_precision_price(symbol)
        precision_format = Decimal(f'1e-{precision}')

        tp_levels = [
            {"level": 1, "multiplier": Decimal('2.0'), "quantity_pct": Decimal('0.5')},
            {"level": 2, "multiplier": Decimal('3.0'), "quantity_pct": Decimal('0.3')},
            {"level": 3, "multiplier": Decimal('4.0'), "quantity_pct": Decimal('0.2')},
        ]

        targets = []

        # TP
        for tp in tp_levels:
            tp_price = (entry_price + tp['multiplier'] * atr) if direction == 'long' else (entry_price - tp['multiplier'] * atr)
            tp_price = tp_price.quantize(precision_format, rounding=ROUND_DOWN)
            tp_quantity = (quantity * tp['quantity_pct']).quantize(Decimal('1e-8'))
            targets.append({
                "type": "TP",
                "price": tp_price,
                "quantity": tp_quantity,
                "level": tp['level']
            })

        # SL (100% –Ω–∞ 1.5 ATR)
        sl_price = (entry_price - Decimal('2.0') * atr) if direction == 'long' else (entry_price + Decimal('2.0') * atr)
        sl_price = sl_price.quantize(precision_format, rounding=ROUND_DOWN)
        targets.append({
            "type": "SL",
            "price": sl_price,
            "quantity": quantity,
            "level": None
        })

        return targets
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SL –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è TP —É—Ä–æ–≤–Ω—è
    def get_sl_after_tp(self, level, entry_price, atr, direction):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –Ω–æ–≤–æ–≥–æ SL –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è TP –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.
        - –ï—Å–ª–∏ –≤–µ—Ä–Ω—É—Ç—å None ‚Äî SL –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.
        - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            - level: —É—Ä–æ–≤–µ–Ω—å TP (1, 2, 3, ...)
            - entry_price: —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
            - atr: —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ATR (–∏–ª–∏ None)
            - direction: 'long' –∏–ª–∏ 'short'
        """
        if level == 1:
            # –ü–æ—Å–ª–µ TP1: SL –Ω–∞ entry_price
            return entry_price

        elif level == 2 and atr is not None:
            # –ü–æ—Å–ª–µ TP2: SL = entry ¬± 1 ATR
            if direction == "long":
                return entry_price + atr
            else:
                return entry_price - atr

        elif level == 3:
            # –ü–æ—Å–ª–µ TP3 ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å, –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä–æ–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
            return None

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –Ω–µ —Å—Ç–∞–≤–∏–º SL
        return None        
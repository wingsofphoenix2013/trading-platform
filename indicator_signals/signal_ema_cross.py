from debug_utils import debug_log

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ EMA –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
async def process_ema_cross_signal(symbol: str, timeframe: str, params: dict, value: float, ts: str, state: dict, publish):
    try:
        # üî∏ –î–ª–∏–Ω–∞ EMA (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9 –∏–ª–∏ 21)
        length = str(params.get("length"))
        if not length:
            return

        key = (symbol, timeframe)
        indicator_key = f"EMA:{length}"

        # üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ —Ç–∏–∫–µ—Ä—É –∏ –¢–§
        if key not in state:
            state[key] = {}
        if indicator_key not in state[key]:
            state[key][indicator_key] = [None, None]

        # üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ in-memory —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state[key][indicator_key][0] = state[key][indicator_key][1]
        state[key][indicator_key][1] = value

        # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö EMA9 –∏ EMA21
        ema9 = state[key].get("EMA:9")
        ema21 = state[key].get("EMA:21")

        if not ema9 or not ema21:
            return
        if None in ema9 or None in ema21:
            return

        # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
        if ema9[0] < ema21[0] and ema9[1] > ema21[1]:
            message = f"EMA_{timeframe}_LONG"
            debug_log(f"‚úî –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {message} –¥–ª—è {symbol}")
            await publish(symbol=symbol, message=message, time=ts)

    except Exception as e:
        debug_log(f"–û—à–∏–±–∫–∞ –≤ process_ema_cross_signal: {e}")
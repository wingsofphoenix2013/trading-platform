import os
import json
import asyncio
import logging
import redis.asyncio as redis
import asyncpg
from datetime import datetime

from debug_utils import debug_log
from signal_ema_cross import process_ema_cross_signal

# üî∏ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")

# üî∏ Redis –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")

# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞
redis_client = redis.Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    password=REDIS_PASSWORD,
    decode_responses=True,
    ssl=True
)

# üî∏ In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
signal_state_storage = {}

# üî∏ –î–∏—Å–ø–µ—Ç—á–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ —Ç–∏–ø—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
INDICATOR_DISPATCH = {
    "EMA": process_ema_cross_signal,
    # –¥—Ä—É–≥–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ
}

# üî∏ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ Redis Stream
async def publish_to_signals_stream(symbol: str, message: str, time: str):
    sent_at = datetime.utcnow().isoformat()
    try:
        await redis_client.xadd("signals_stream", {
            "message": message,
            "symbol": symbol,
            "time": time,
            "sent_at": sent_at
        })
        logging.info(f"üì§ –°–∏–≥–Ω–∞–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {message} / {symbol}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è Redis Stream
async def listen_to_indicators(db_pool):
    group = "indicator_signal_workers"
    consumer = f"worker-{os.getpid()}"

    try:
        await redis_client.xgroup_create("indicators_ready_stream", group, id="0", mkstream=True)
    except redis.ResponseError as e:
        if "BUSYGROUP" in str(e):
            logging.info("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            raise

    while True:
        result = await redis_client.xreadgroup(
            groupname=group,
            consumername=consumer,
            streams={"indicators_ready_stream": ">"},
            count=10,
            block=1000
        )

        if not result:
            continue

        for stream_name, messages in result:
            for entry_id, data in messages:
                await handle_indicator_message(data, db_pool)
                await redis_client.xack("indicators_ready_stream", group, entry_id)

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
async def handle_indicator_message(data: dict, db_pool):
    try:
        symbol = data["symbol"]
        timeframe = data["timeframe"]
        indicator = data["indicator"]
        params = json.loads(data["params"])
        calculated_at = data["calculated_at"]

        processor = INDICATOR_DISPATCH.get(indicator)
        if processor:
            await processor(
                symbol=symbol,
                timeframe=timeframe,
                params=params,
                ts=calculated_at,
                state=signal_state_storage,
                publish=publish_to_signals_stream,
                db_pool=db_pool
            )
        else:
            debug_log(f"–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {indicator}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    logging.info("üöÄ Indicator Signal Worker –∑–∞–ø—É—â–µ–Ω")

    db_pool = await asyncpg.create_pool(dsn=os.getenv("DATABASE_URL"))
    await listen_to_indicators(db_pool)

if __name__ == "__main__":
    asyncio.run(main())
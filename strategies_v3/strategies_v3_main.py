# üî∏ –ò–º–ø–æ—Ä—Ç—ã –∏ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
import asyncio
import logging

from strategies_v3_interface import StrategyInterface

logging.basicConfig(level=logging.INFO)

# üî∏ –•—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–∞–º—è—Ç–∏
tickers_storage = {}
open_positions = {}
latest_prices = {}
# üî∏ –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
strategies_cache = {}
allowed_symbols = {}

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ë–î
async def load_tickers():
    interface = StrategyInterface()
    global tickers_storage
    tickers_storage = await interface.load_tickers()
    logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers_storage)}")

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
async def load_strategies():
    interface = StrategyInterface()
    pg = await interface.get_pg()
    rows = await pg.fetch("""
        SELECT * FROM strategies_v2
        WHERE enabled = true AND archived = false
    """)
    global strategies_cache
    strategies_cache = {row["name"]: dict(row) for row in rows}
    logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(strategies_cache)}")

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤, —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
async def load_strategy_tickers():
    interface = StrategyInterface()
    pg = await interface.get_pg()

    # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–∫–µ—Ä—ã —Å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π
    ticker_rows = await pg.fetch("""
        SELECT symbol FROM tickers
        WHERE status = 'enabled' AND tradepermission = 'enabled'
    """)
    all_symbols = {row["symbol"] for row in ticker_rows}

    # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å use_all_tickers = true
    global allowed_symbols
    allowed_symbols.clear()

    strategy_all_rows = await pg.fetch("""
        SELECT name FROM strategies_v2
        WHERE enabled = true AND archived = false AND use_all_tickers = true
    """)
    for row in strategy_all_rows:
        allowed_symbols[row["name"]] = set(all_symbols)

    # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏ –∏–∑ strategy_tickers_v2 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    specific_rows = await pg.fetch("""
        SELECT s.name AS strategy_name, t.symbol
        FROM strategy_tickers_v2 st
        JOIN strategies_v2 s ON s.id = st.strategy_id
        JOIN tickers t ON t.id = st.ticker_id
        WHERE st.enabled = true AND t.status = 'enabled' AND t.tradepermission = 'enabled'
    """)
    for row in specific_rows:
        strategy = row["strategy_name"]
        symbol = row["symbol"]
        allowed_symbols.setdefault(strategy, set()).add(symbol)

    total = sum(len(v) for v in allowed_symbols.values())
    logging.info(f"‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {len(allowed_symbols)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –≤—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {total}")
# üî∏ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
async def refresh_tickers_periodically():
    while True:
        try:
            await load_tickers()
            await load_strategy_tickers()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤/—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
        await asyncio.sleep(120)

# üî∏ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)
async def monitor_prices():
    while True:
        await asyncio.sleep(1)

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
async def listen_strategy_tasks():
    while True:
        await asyncio.sleep(1)

# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
async def main():
    logging.info("üöÄ Strategy Worker (v3) –∑–∞–ø—É—â–µ–Ω.")
    await load_tickers()
    await load_strategies()
    await load_strategy_tickers()
    asyncio.create_task(refresh_tickers_periodically())
    asyncio.create_task(monitor_prices())
    await listen_strategy_tasks()

if __name__ == "__main__":
    asyncio.run(main())
# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π v3

import os
import asyncio
import logging
import redis.asyncio as redis
from redis.exceptions import ResponseError
import json
import asyncpg
from decimal import Decimal, ROUND_DOWN
from datetime import datetime
from debug_utils import debug_log
from strategy_1 import Strategy1
from strategies_v3_interface import StrategyInterface
        
# üî∏ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")
DATABASE_URL = os.getenv("DATABASE_URL")

# üî∏ Redis –∫–ª–∏–µ–Ω—Ç
redis_client = redis.Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    password=REDIS_PASSWORD,
    decode_responses=True,
    ssl=True
)

# üî∏ –•—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–∞–º—è—Ç–∏
tickers_storage = {}
open_positions = {}
targets_by_position = {}
latest_prices = {}
strategies_cache = {}
strategy_allowed_tickers = {}

# üî∏ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
strategies = {
    "strategy_1": Strategy1(),
}
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
async def load_tickers(db_pool):
    global tickers_storage

    try:
        async with db_pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT symbol, precision_price, precision_qty, min_qty,
                       status, tradepermission, is_active
                FROM tickers
                WHERE status = 'enabled'
            """)

        tickers_storage = {
            row["symbol"]: {
                "precision_price": row["precision_price"],
                "precision_qty": row["precision_qty"],
                "min_qty": float(row["min_qty"]),
                "status": row["status"],
                "tradepermission": row["tradepermission"],
                "is_active": row["is_active"]
            }
            for row in rows
        }

        debug_log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers_storage)}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ä–æ–≤: {e}")
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
async def load_strategy_tickers(db_pool):
    global strategy_allowed_tickers

    try:
        async with db_pool.acquire() as conn:
            result = {}

            for strategy_id, strategy in strategies_cache.items():
                use_all = strategy.get("use_all_tickers", False)

                if use_all:
                    # –í—Å–µ —Ç–∏–∫–µ—Ä—ã —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                    allowed = {
                        symbol for symbol, t in tickers_storage.items()
                        if t["status"] == "enabled" and t["tradepermission"] == "enabled"
                    }
                else:
                    rows = await conn.fetch("""
                        SELECT t.symbol
                        FROM strategy_tickers_v2 st
                        JOIN tickers t ON st.ticker_id = t.id
                        WHERE st.strategy_id = $1 AND st.enabled = true
                    """, strategy_id)
                    allowed = {row["symbol"] for row in rows}

                result[strategy_id] = allowed

        strategy_allowed_tickers = result
        total = sum(len(tickers) for tickers in result.values())
        debug_log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {total} (–¥–ª—è {len(result)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π)")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ strategy_tickers: {e}")
# üî∏ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–∏–∫–µ—Ä—ã, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –ø–æ–∑–∏—Ü–∏–∏)
async def refresh_all_periodically(db_pool):
    while True:
        debug_log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤, —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –ø–æ–∑–∏—Ü–∏–π...")
        await load_tickers(db_pool)
        await load_strategies(db_pool)
        await load_strategy_tickers(db_pool)
        await load_open_positions(db_pool)
        await load_position_targets(db_pool)
        await asyncio.sleep(60)
# üî∏ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ Redis (–∫–ª—é—á–∏ –≤–∏–¥–∞ price:<symbol>)
async def monitor_prices():
    while True:
        try:
            keys = await redis_client.keys("price:*")
            if keys:
                values = await redis_client.mget(keys)
                for key, value in zip(keys, values):
                    if value is None:
                        continue
                    symbol = key.split("price:")[1]
                    try:
                        price = Decimal(value)
                        precision = tickers_storage.get(symbol, {}).get("precision_price", 8)
                        rounded = price.quantize(Decimal(f"1e-{precision}"), rounding=ROUND_DOWN)
                        latest_prices[symbol] = rounded
                    except Exception as e:
                        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω—ã {key}: {value} ‚Äî {e}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ü–µ–Ω –∏–∑ Redis: {e}")
        await asyncio.sleep(1)                           
# üî∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
async def handle_task(task_data: dict, db_pool):
    strategy_name = task_data.get("strategy")
    strategy = strategies.get(strategy_name)

    if not strategy:
        logging.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {strategy_name}")
        return

    interface = StrategyInterface(
        redis_client=redis_client,
        db_pool=db_pool,
        strategies_cache=strategies_cache,
        strategy_allowed_tickers=strategy_allowed_tickers,
        open_positions=open_positions,
        tickers_storage=tickers_storage,
        latest_prices=latest_prices,
        targets_by_position=targets_by_position
    )

    # üîπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    ok, note = await interface.run_basic_checks(task_data)
    debug_log(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: {ok}, –ü—Ä–∏—á–∏–Ω–∞: {note}")

    if not ok:
        strategy_id = await interface.get_strategy_id_by_name(strategy_name)
        log_id = int(task_data.get("log_id"))

        await interface.log_strategy_action(
            strategy_id=strategy_id,
            log_id=log_id,
            status="ignored_by_check",
            note=note
        )
        return

    # üîπ –í—ã–∑–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
    try:
        await asyncio.wait_for(
            strategy.on_signal(task_data, interface),
            timeout=10  # ‚Üê –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 10 —Å–µ–∫—É–Ω–¥
        )
    except asyncio.TimeoutError:
        logging.error(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{strategy_name}' –ø—Ä–µ–≤—ã—à–µ–Ω–æ (—Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫)")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
        
# üî∏ –°–ª—É—à–∞—Ç–µ–ª—å –∑–∞–¥–∞—á –∏–∑ Redis Stream
async def listen_strategy_tasks(db_pool):
    group_name = "strategy_group"
    consumer_name = "strategy_worker"
    stream_name = "strategy_tasks"

    try:
        await redis_client.xgroup_create(name=stream_name, groupname=group_name, id="0", mkstream=True)
        debug_log("‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞.")
    except ResponseError as e:
        if "BUSYGROUP" in str(e):
            debug_log("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            raise

    while True:
        try:
            entries = await redis_client.xreadgroup(
                groupname=group_name,
                consumername=consumer_name,
                streams={stream_name: ">"},
                count=10,
                block=500
            )
            for stream, messages in entries:
                for msg_id, msg_data in messages:
                    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {msg_data}")

                    try:
                        await handle_task(msg_data, db_pool)
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏: {e}")
                    finally:
                        await redis_client.xack(stream_name, group_name, msg_id)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ Redis Stream: {e}")
            await asyncio.sleep(1)
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –±–∞–∑—ã
async def load_strategies(db_pool):
    global strategies_cache

    try:
        async with db_pool.acquire() as conn:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            rows = await conn.fetch("""
                SELECT *
                FROM strategies_v2
                WHERE enabled = true AND archived = false
            """)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º TP-—É—Ä–æ–≤–Ω–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            tp_levels = await conn.fetch("""
                SELECT *
                FROM strategy_tp_levels_v2
            """)

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º TP-—É—Ä–æ–≤–Ω–∏ –ø–æ strategy_id
            tp_levels_by_strategy = {}
            for row in tp_levels:
                sid = row["strategy_id"]
                tp_levels_by_strategy.setdefault(sid, []).append(dict(row))

            # –ó–∞–≥—Ä—É–∂–∞–µ–º SL-–ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ TP
            tp_sl_rules = await conn.fetch("""
                SELECT *
                FROM strategy_tp_sl_v2
            """)

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º SL-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ strategy_id
            tp_sl_by_strategy = {}
            for row in tp_sl_rules:
                sid = row["strategy_id"]
                tp_sl_by_strategy.setdefault(sid, []).append(dict(row))

        # –§–æ—Ä–º–∏—Ä—É–µ–º strategies_cache
        strategies_cache = {}
        for row in rows:
            sid = row["id"]
            strategy_dict = dict(row)
            strategy_dict["tp_levels"] = tp_levels_by_strategy.get(sid, [])
            strategy_dict["tp_sl_rules"] = tp_sl_by_strategy.get(sid, [])
            strategies_cache[sid] = strategy_dict

        debug_log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(strategies_cache)}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã
async def load_open_positions(db_pool):
    global open_positions

    try:
        async with db_pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT *
                FROM positions_v2
                WHERE status = 'open'
            """)

        open_positions = {
            row["id"]: dict(row) for row in rows
        }

        debug_log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–ª–µ–π –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –∏–∑ –±–∞–∑—ã
async def load_position_targets(db_pool):
    global targets_by_position

    try:
        async with db_pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT *
                FROM position_targets_v2
                WHERE hit = false AND canceled = false
            """)

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ position_id
        grouped = {}
        for row in rows:
            pid = row["position_id"]
            grouped.setdefault(pid, []).append(dict(row))

        targets_by_position = grouped

        total = sum(len(t) for t in grouped.values())
        debug_log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ü–µ–ª–µ–π: {total} –¥–ª—è {len(targets_by_position)} –ø–æ–∑–∏—Ü–∏–π")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏: {e}")
# üî∏ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ TP/SL
async def follow_positions():
    for position_id, pos in open_positions.items():
        symbol = pos["symbol"]
        direction = pos["direction"]

        latest_price = latest_prices.get(symbol)
        if latest_price is None:
            logging.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ü–µ–Ω—ã –¥–ª—è {symbol}, –ø–æ–∑–∏—Ü–∏—è ID={position_id}")
            continue

        targets = targets_by_position.get(position_id, [])
        if not targets:
            logging.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è ID={position_id} –Ω–µ –∏–º–µ–µ—Ç —Ü–µ–ª–µ–π")
            continue

        # üîπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        debug_log(f"üì° –ü–æ–∑–∏—Ü–∏—è ID={position_id}, {symbol}, {direction} ‚Äî —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {latest_price}")

        # üîπ TP-–∫–æ–Ω—Ç—Ä–æ–ª—å
        tp_levels = [
            t for t in targets
            if t["type"] == "tp" and not t["hit"] and not t["canceled"]
        ]
        tp_levels.sort(key=lambda x: x["level"])

        next_tp = None
        for tp in tp_levels:
            lvl = tp["level"]
            blockers = [
                b for b in tp_levels
                if b["level"] < lvl and b["tp_trigger_type"] == "signal" and not b["hit"]
            ]
            if blockers:
                continue
            if tp["tp_trigger_type"] != "price":
                continue
            next_tp = tp
            break

        if next_tp:
            tp_price = next_tp["price"]
            level = next_tp["level"]
            if direction == "long" and latest_price >= tp_price:
                debug_log(f"üí° –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ TP —É—Ä–æ–≤–Ω—è #{level} –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ID={position_id} ‚Äî {latest_price} ‚â• {tp_price}")
            elif direction == "short" and latest_price <= tp_price:
                debug_log(f"üí° –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ TP —É—Ä–æ–≤–Ω—è #{level} –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ID={position_id} ‚Äî {latest_price} ‚â§ {tp_price}")

        # üîπ SL-–∫–æ–Ω—Ç—Ä–æ–ª—å
        sl = next((t for t in targets if t["type"] == "sl" and not t["hit"] and not t["canceled"]), None)
        if sl:
            sl_price = sl["price"]
            if direction == "long" and latest_price <= sl_price:
                debug_log(f"‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ SL –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ID={position_id} ‚Äî {latest_price} ‚â§ {sl_price}")
            elif direction == "short" and latest_price >= sl_price:
                debug_log(f"‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ SL –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ID={position_id} ‚Äî {latest_price} ‚â• {sl_price}")
# üî∏ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
async def follow_positions_loop():
    while True:
        await follow_positions()
        await asyncio.sleep(1)
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
async def position_close_loop(db_pool):
    stream_name = "position:close"
    group_name = "position_closer"
    consumer_name = "position_closer_worker"

    try:
        await redis_client.xgroup_create(name=stream_name, groupname=group_name, id="0", mkstream=True)
        debug_log("‚úÖ –ì—Ä—É–ø–ø–∞ position_closer —Å–æ–∑–¥–∞–Ω–∞")
    except ResponseError as e:
        if "BUSYGROUP" in str(e):
            debug_log("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ position_closer —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            raise

    while True:
        try:
            entries = await redis_client.xreadgroup(
                groupname=group_name,
                consumername=consumer_name,
                streams={stream_name: ">"},
                count=10,
                block=1000
            )

            for stream, messages in entries:
                for msg_id, data in messages:
                    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {data}")
                try:
                    position_id = int(data["position_id"])
                    target_id = int(data["target_id"])
                except (KeyError, ValueError):
                    logging.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç position_id –∏–ª–∏ target_id")
                    await redis_client.xack(stream_name, group_name, msg_id)
                    continue

                position = open_positions.get(position_id)
                if not position:
                    logging.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {position_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏")
                    await redis_client.xack(stream_name, group_name, msg_id)
                    continue

                targets = targets_by_position.get(position_id, [])
                debug_log(f"üß™ –ü–∞–º—è—Ç—å —Ü–µ–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏ {position_id}: {json.dumps(targets, default=str)}")
                debug_log(f"üß™ –ò—â–µ–º target_id = {target_id}")
                
                target = next((t for t in targets if t.get("id") == target_id), None)
                
                if data.get("type") == "sl":
                    try:
                        async with db_pool.acquire() as conn:
                            await conn.execute("""
                                UPDATE position_targets_v2
                                SET hit = true, hit_at = NOW()
                                WHERE id = $1
                            """, target_id)

                        logging.info(f"‚úÖ SL —Ü–µ–ª—å ID={target_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ hit")

                        try:
                            sl_price = Decimal(target["price"])

                            async with db_pool.acquire() as conn:
                                await conn.execute("""
                                    UPDATE positions_v2
                                    SET status = 'closed',
                                        planned_risk = 0,
                                        exit_price = $1,
                                        closed_at = NOW(),
                                        close_reason = $2
                                    WHERE id = $3
                                """, sl_price, "sl", position_id)

                            position["status"] = "closed"
                            position["planned_risk"] = Decimal("0")
                            position["exit_price"] = sl_price
                            position["close_reason"] = "sl"

                            logging.info(f"üõë –ü–æ–∑–∏—Ü–∏—è ID={position_id} –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ SL –Ω–∞ —É—Ä–æ–≤–Ω–µ {sl_price}")

                            # üîπ –ü–µ—Ä–µ—Å—á—ë—Ç pnl –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ SL
                            try:
                                entry_price = Decimal(position["entry_price"])
                                qty = Decimal(position["quantity_left"])
                                direction = position["direction"]
                                precision = Decimal("1e-8")

                                if direction == "long":
                                    delta = sl_price - entry_price
                                else:
                                    delta = entry_price - sl_price

                                pnl_increment = delta * qty
                                current_pnl = Decimal(position["pnl"])
                                new_pnl = (current_pnl + pnl_increment).quantize(precision, rounding=ROUND_DOWN)

                                async with db_pool.acquire() as conn:
                                    await conn.execute("""
                                        UPDATE positions_v2
                                        SET pnl = $1
                                        WHERE id = $2
                                    """, new_pnl, position_id)

                                position["pnl"] = new_pnl
                                logging.info(f"üí∞ –û–±–Ω–æ–≤–ª—ë–Ω pnl: {current_pnl} ‚Üí {new_pnl} (SL –ø–æ {qty} @ {sl_price})")

                            except Exception as e:
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á—ë—Ç–µ pnl –ø–æ SL: {e}")
                                await redis_client.xack(stream_name, group_name, msg_id)
                                continue

                            # üî∏ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏ –∏ –æ—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ü–µ–ª–µ–π
                            try:
                                open_positions.pop(position_id, None)
                                targets_by_position.pop(position_id, None)

                                async with db_pool.acquire() as conn:
                                    await conn.execute("""
                                        UPDATE position_targets_v2
                                        SET canceled = true
                                        WHERE position_id = $1 AND hit = false
                                    """, position_id)

                                logging.info(f"üö´ –¶–µ–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ ID={position_id} –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ canceled (SL)")

                            except Exception as e:
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ü–µ–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏ {position_id}: {e}")
                                await redis_client.xack(stream_name, group_name, msg_id)
                                continue

                            await redis_client.xack(stream_name, group_name, msg_id)
                            continue

                        except Exception as e:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ SL: {e}")
                            await redis_client.xack(stream_name, group_name, msg_id)
                            continue

                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ SL —Ü–µ–ª–∏ {target_id}: {e}")
                        await redis_client.xack(stream_name, group_name, msg_id)
                        continue
                        
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –∏–∑ –ø–∞–º—è—Ç–∏
                targets_by_position[position_id] = [
                    t for t in targets if t.get("id") != target_id
                ]

                try:
                    symbol = position["symbol"]
                    precision_qty = Decimal(f"1e-{tickers_storage[symbol]['precision_qty']}")
                    qty_left_before = Decimal(position["quantity_left"])
                    qty_hit = Decimal(target["quantity"])
                    new_quantity_left = (qty_left_before - qty_hit).quantize(precision_qty, rounding=ROUND_DOWN)

                    async with db_pool.acquire() as conn:
                        await conn.execute("""
                            UPDATE positions_v2
                            SET quantity_left = $1
                            WHERE id = $2
                        """, new_quantity_left, position_id)

                    position["quantity_left"] = new_quantity_left  # –æ–±–Ω–æ–≤–∏—Ç—å in-memory

                    debug_log(f"üìâ –û–±–Ω–æ–≤–ª–µ–Ω–æ quantity_left: {qty_left_before} ‚Üí {new_quantity_left} –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ID={position_id}")

                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ quantity_left: {e}")
                    await redis_client.xack(stream_name, group_name, msg_id)
                    continue

                strategy_id = position["strategy_id"]
                strategy = strategies_cache.get(strategy_id)
                tp_sl_rules = strategy.get("tp_sl_rules", [])

                sl_rule = next((r for r in tp_sl_rules if r["tp_level_id"] == target_id), None)

                if not sl_rule or sl_rule["sl_mode"] == "none":
                    debug_log(f"‚ÑπÔ∏è –î–ª—è TP {target_id} –ø–æ–ª–∏—Ç–∏–∫–∞ SL –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                else:
                    # üî∏ –ù–∞–π–¥—ë–º —Ç–µ–∫—É—â–∏–π SL –≤ –ø–∞–º—è—Ç–∏
                    current_sl = next((t for t in targets_by_position.get(position_id, []) if t["type"] == "sl" and not t["hit"] and not t["canceled"]), None)

                    if not current_sl:
                        logging.warning(f"‚ö†Ô∏è –¢–µ–∫—É—â–∏–π SL –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å")
                    else:
                        # üîπ –û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–π SL –≤ –ë–î
                        async with db_pool.acquire() as conn:
                            await conn.execute("""
                                UPDATE position_targets_v2
                                SET canceled = true
                                WHERE position_id = $1 AND type = 'sl' AND hit = false AND canceled = false
                            """, position_id)

                        # üîπ –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π SL –∏–∑ –ø–∞–º—è—Ç–∏
                        targets_by_position[position_id] = [
                            t for t in targets_by_position[position_id]
                            if not (t["type"] == "sl" and not t["hit"] and not t["canceled"])
                        ]

                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é targets
                        targets = targets_by_position[position_id]

                        debug_log(f"üîÅ –°—Ç–∞—Ä—ã–π SL –æ—Ç–º–µ–Ω—ë–Ω ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ—Å—á—ë—Ç—É –Ω–æ–≤–æ–≥–æ")
                        
                    # üîπ –†–∞—Å—á—ë—Ç –Ω–æ–≤–æ–≥–æ SL
                    sl_mode = sl_rule["sl_mode"]
                    sl_value = Decimal(str(sl_rule["sl_value"])) if sl_mode in ("percent", "atr") else None
                    entry_price = Decimal(position["entry_price"])
                    direction = position["direction"]

                    sl_price = None

                    if sl_mode == "entry":
                        sl_price = entry_price

                    elif sl_mode == "percent":
                        delta = entry_price * (sl_value / Decimal("100"))
                        sl_price = (entry_price - delta if direction == "long" else entry_price + delta)

                    elif sl_mode == "atr":
                        atr = await get_indicator_value(symbol, strategy["timeframe"], "ATR", "atr")
                        if atr is not None:
                            sl_price = (entry_price - atr * sl_value if direction == "long" else entry_price + atr * sl_value)

                    if sl_price is None:
                        logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å SL ‚Äî –ø—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    else:
                        precision_price = Decimal(f"1e-{tickers_storage[symbol]['precision_price']}")
                        sl_price = sl_price.quantize(precision_price, rounding=ROUND_DOWN)

                        quantity = Decimal(position["quantity_left"])

                        async with db_pool.acquire() as conn:
                            await conn.execute("""
                                INSERT INTO position_targets_v2 (
                                    position_id, type, price, quantity,
                                    hit, canceled, tp_trigger_type
                                ) VALUES (
                                    $1, 'sl', $2, $3,
                                    false, false, 'price'
                                )
                            """, position_id, sl_price, quantity)

                        targets_by_position[position_id].append({
                            "type": "sl",
                            "price": sl_price,
                            "quantity": quantity,
                            "hit": False,
                            "canceled": False
                        })

                        logging.info(f"üìå SL –ø–µ—Ä–µ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ TP {target_id}: –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å = {sl_price}")
                # üîπ –ü–µ—Ä–µ—Å—á—ë—Ç planned_risk
                try:
                    entry_price = Decimal(position["entry_price"])
                    quantity_left = Decimal(position["quantity_left"])

                    # –ù–∞–π–¥—ë–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π SL
                    sl = next((t for t in targets_by_position.get(position_id, [])
                               if t["type"] == "sl" and not t["hit"] and not t["canceled"]), None)

                    if not sl:
                        logging.warning(f"‚ö†Ô∏è SL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ planned_risk (–ø–æ–∑–∏—Ü–∏—è {position_id})")
                    else:
                        sl_price = Decimal(sl["price"])
                        risk = abs(entry_price - sl_price) * quantity_left
                        risk = risk.quantize(Decimal("1e-8"), rounding=ROUND_DOWN)

                        async with db_pool.acquire() as conn:
                            await conn.execute("""
                                UPDATE positions_v2
                                SET planned_risk = $1
                                WHERE id = $2
                            """, risk, position_id)

                        position["planned_risk"] = risk
                        logging.info(f"üìê –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω planned_risk: {risk} –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ID={position_id}")

                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á—ë—Ç–µ planned_risk: {e}")
                    await redis_client.xack(stream_name, group_name, msg_id)
                    continue
                # üîπ –ü–µ—Ä–µ—Å—á—ë—Ç pnl
                try:
                    entry_price = Decimal(position["entry_price"])
                    tp_price = Decimal(target["price"])
                    qty = Decimal(target["quantity"])
                    direction = position["direction"]
                    precision = Decimal("1e-8")

                    if direction == "long":
                        delta = tp_price - entry_price
                    else:
                        delta = entry_price - tp_price

                    pnl_increment = delta * qty
                    current_pnl = Decimal(position["pnl"])
                    new_pnl = (current_pnl + pnl_increment).quantize(precision, rounding=ROUND_DOWN)

                    async with db_pool.acquire() as conn:
                        await conn.execute("""
                            UPDATE positions_v2
                            SET pnl = $1
                            WHERE id = $2
                        """, new_pnl, position_id)

                    position["pnl"] = new_pnl
                    logging.info(f"üí∞ –û–±–Ω–æ–≤–ª—ë–Ω pnl: {current_pnl} ‚Üí {new_pnl} (TP –ø–æ {qty} @ {tp_price})")

                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á—ë—Ç–µ pnl: {e}")
                    await redis_client.xack(stream_name, group_name, msg_id)
                    continue
                # üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ close_reason
                try:
                    level = target.get("level")
                    reason = f"tp-{level}-hit"

                    async with db_pool.acquire() as conn:
                        await conn.execute("""
                            UPDATE positions_v2
                            SET close_reason = $1
                            WHERE id = $2
                        """, reason, position_id)

                        position["close_reason"] = reason
                        logging.info(f"üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω close_reason: {reason} –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ID={position_id}")

                        # üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ system_logs
                        tp_price = str(target.get("price"))
                        qty_for_log = str(target.get("quantity"))

                        log_details = json.dumps({
                            "position_id": position_id,
                            "target_id": target_id,
                            "tp_price": tp_price,
                            "quantity": qty_for_log
                        })

                        await conn.execute("""
                            INSERT INTO system_logs (
                                level, message, source, details, action_flag
                            ) VALUES (
                                'INFO', $1, 'position_close_worker', $2, 'ignore'
                            )
                        """, f"–°—Ä–∞–±–æ—Ç–∞–ª TP —É—Ä–æ–≤–µ–Ω—å {level}", log_details)

                        logging.info(f"üßæ –ó–∞–ø–∏—Å—å –≤ system_logs: TP {level} –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ID={position_id}")

                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ close_reason –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ system_logs: {e}")
                    await redis_client.xack(stream_name, group_name, msg_id)
                    continue
                    
                # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                if position["quantity_left"] == 0:
                    try:
                        tp_price = Decimal(target["price"])

                        async with db_pool.acquire() as conn:
                            await conn.execute("""
                                UPDATE positions_v2
                                SET status = 'closed',
                                    planned_risk = 0,
                                    exit_price = $1,
                                    closed_at = NOW(),
                                    close_reason = 'tp-full-hit'
                                WHERE id = $2
                            """, tp_price, position_id)

                        position["status"] = "closed"
                        position["close_reason"] = "tp-full-hit"
                        position["planned_risk"] = Decimal("0")
                        position["exit_price"] = tp_price
                        
                        # üîπ –û—Ç–º–µ—Ç–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ü–µ–ª–∏ –∫–∞–∫ canceled
                        async with db_pool.acquire() as conn:
                            await conn.execute("""
                                UPDATE position_targets_v2
                                SET canceled = true
                                WHERE position_id = $1 AND hit = false
                            """, position_id)

                        logging.info(f"üö´ –¶–µ–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ ID={position_id} –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ canceled")                        
                        # üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–µ–ª–µ–π –∏–∑ –ø–∞–º—è—Ç–∏
                        open_positions.pop(position_id, None)
                        targets_by_position.pop(position_id, None)
                        
                        logging.info(f"üßπ –ü–æ–∑–∏—Ü–∏—è ID={position_id} –∏ –µ—ë —Ü–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏")
                        
                        logging.info(f"üö´ –ü–æ–∑–∏—Ü–∏—è ID={position_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ TP (tp-full-hit)")
                        # üîπ –õ–æ–≥ –≤ system_logs: tp-full-hit
                        try:
                            log_details = json.dumps({
                                "position_id": position_id,
                                "tp_price": str(tp_price),
                                "pnl": str(position["pnl"]),
                                "quantity": str(position["quantity"])
                            })

                            async with db_pool.acquire() as conn:
                                await conn.execute("""
                                    INSERT INTO system_logs (
                                        level, message, source, details, action_flag
                                    ) VALUES (
                                        'INFO', $1, 'position_close_worker', $2, 'audit'
                                    )
                                """, "–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ TP (–ø–æ–ª–Ω–æ—Å—Ç—å—é)", log_details)

                            logging.info(f"üßæ –ó–∞–ø–∏—Å—å –≤ system_logs: TP-full-hit –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ID={position_id}")

                        except Exception as e:
                            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å system_log –¥–ª—è tp-full-hit: {e}")
                            
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ ID={position_id}: {e}")
                        await redis_client.xack(stream_name, group_name, msg_id)
                        continue                    
                                                                                                                            
                await redis_client.xack(stream_name, group_name, msg_id)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ position_close_loop: {e}")
            await asyncio.sleep(1)                                                                  
# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
async def main():
    logging.info("üöÄ Strategy Worker (v3) –∑–∞–ø—É—â–µ–Ω.")

    # üîπ –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ PostgreSQL
    db_pool = await asyncpg.create_pool(DATABASE_URL)
    logging.info("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ PostgreSQL —Å–æ–∑–¥–∞–Ω")

    # üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â
    await load_tickers(db_pool)
    await load_strategies(db_pool)
    await load_strategy_tickers(db_pool)
    await load_open_positions(db_pool)
    await load_position_targets(db_pool)

    # üîπ –§–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–º–∏)
    asyncio.create_task(refresh_all_periodically(db_pool))
    asyncio.create_task(monitor_prices())
    asyncio.create_task(follow_positions_loop())
    asyncio.create_task(position_close_loop(db_pool))

    # üîπ –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –∑–∞–¥–∞—á (–ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
    await listen_strategy_tasks(db_pool)
    
if __name__ == "__main__":
    asyncio.run(main())
# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π v3

import os
import asyncio
import logging
import redis
import json
from strategy_1 import Strategy1
from strategies_v3_interface import StrategyInterface

# üî∏ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")
DATABASE_URL = os.getenv("DATABASE_URL")

# üî∏ Redis –∫–ª–∏–µ–Ω—Ç
redis_client = redis.Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    password=REDIS_PASSWORD,
    decode_responses=True,
    ssl=True
)

# üî∏ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
strategies = {
    "strategy_1": Strategy1(),
}

# üî∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
async def handle_task(task_data: dict):
    strategy_name = task_data.get("strategy")
    strategy = strategies.get(strategy_name)

    if not strategy:
        logging.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {strategy_name}")
        return

    interface = StrategyInterface(redis_client=redis_client, database_url=DATABASE_URL)

    try:
        await strategy.on_signal(task_data, interface)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")

# üî∏ –°–ª—É—à–∞—Ç–µ–ª—å –∑–∞–¥–∞—á –∏–∑ Redis Stream
async def listen_strategy_tasks():
    group_name = "strategy_group"
    consumer_name = "strategy_worker"
    stream_name = "strategy_tasks"

    try:
        redis_client.xgroup_create(name=stream_name, groupname=group_name, id="0", mkstream=True)
        logging.info("‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞.")
    except redis.exceptions.ResponseError as e:
        if "BUSYGROUP" in str(e):
            logging.info("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            raise

    while True:
        try:
            entries = redis_client.xreadgroup(group_name, consumer_name, {stream_name: ">"}, count=10, block=5000)
            for stream, messages in entries:
                for msg_id, msg_data in messages:
                    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {msg_data}")
                    await handle_task(msg_data)
                    redis_client.xack(stream_name, group_name, msg_id)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ Redis Stream: {e}")
            await asyncio.sleep(1)

# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
async def main():
    logging.info("üöÄ Strategy Worker (v3) –∑–∞–ø—É—â–µ–Ω.")
    await listen_strategy_tasks()

if __name__ == "__main__":
    asyncio.run(main())
# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ä–∫–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π v3

import os
import asyncio
import logging
import redis.asyncio as redis
from redis.exceptions import ResponseError
import json
import asyncpg
from decimal import Decimal, ROUND_DOWN
from strategy_1 import Strategy1
from strategies_v3_interface import StrategyInterface

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ—Ç–ª–∞–¥–∫–∏
DEBUG_MODE = False  # ‚Üê –º–µ–Ω—è–π –Ω–∞ True –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

def debug_log(message: str):
    if DEBUG_MODE:
        logging.info(message)
        
# üî∏ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")
DATABASE_URL = os.getenv("DATABASE_URL")

# üî∏ Redis –∫–ª–∏–µ–Ω—Ç
redis_client = redis.Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    password=REDIS_PASSWORD,
    decode_responses=True,
    ssl=True
)

# üî∏ –•—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–∞–º—è—Ç–∏
tickers_storage = {}
open_positions = {}
latest_prices = {}
strategies_cache = {}
strategy_allowed_tickers = {}

# üî∏ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
strategies = {
    "strategy_1": Strategy1(),
}
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
async def load_tickers(db_pool):
    global tickers_storage

    try:
        async with db_pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT symbol, precision_price, precision_qty, min_qty,
                       status, tradepermission, is_active
                FROM tickers
                WHERE status = 'enabled'
            """)

        tickers_storage = {
            row["symbol"]: {
                "precision_price": row["precision_price"],
                "precision_qty": row["precision_qty"],
                "min_qty": float(row["min_qty"]),
                "status": row["status"],
                "tradepermission": row["tradepermission"],
                "is_active": row["is_active"]
            }
            for row in rows
        }

        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers_storage)}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ä–æ–≤: {e}")
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
async def load_strategy_tickers(db_pool):
    global strategy_allowed_tickers

    try:
        async with db_pool.acquire() as conn:
            result = {}

            for strategy_id, strategy in strategies_cache.items():
                use_all = strategy.get("use_all_tickers", False)

                if use_all:
                    # –í—Å–µ —Ç–∏–∫–µ—Ä—ã —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                    allowed = {
                        symbol for symbol, t in tickers_storage.items()
                        if t["status"] == "enabled" and t["tradepermission"] == "enabled"
                    }
                else:
                    rows = await conn.fetch("""
                        SELECT t.symbol
                        FROM strategy_tickers_v2 st
                        JOIN tickers t ON st.ticker_id = t.id
                        WHERE st.strategy_id = $1 AND st.enabled = true
                    """, strategy_id)
                    allowed = {row["symbol"] for row in rows}

                result[strategy_id] = allowed

        strategy_allowed_tickers = result
        total = sum(len(tickers) for tickers in result.values())
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {total} (–¥–ª—è {len(result)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π)")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ strategy_tickers: {e}")
# üî∏ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–∏–∫–µ—Ä—ã, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –ø–æ–∑–∏—Ü–∏–∏)
async def refresh_all_periodically(db_pool):
    while True:
        logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤, —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –ø–æ–∑–∏—Ü–∏–π...")
        await load_tickers(db_pool)
        await load_strategies(db_pool)
        await load_strategy_tickers(db_pool)
        await load_open_positions(db_pool)
        await asyncio.sleep(60)
# üî∏ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ Redis (–∫–ª—é—á–∏ –≤–∏–¥–∞ price:<symbol>)
async def monitor_prices():
    while True:
        try:
            keys = await redis_client.keys("price:*")
            if keys:
                values = await redis_client.mget(keys)
                for key, value in zip(keys, values):
                    if value is None:
                        continue
                    symbol = key.split("price:")[1]
                    try:
                        price = Decimal(value)
                        precision = tickers_storage.get(symbol, {}).get("precision_price", 8)
                        rounded = price.quantize(Decimal(f"1e-{precision}"), rounding=ROUND_DOWN)
                        latest_prices[symbol] = rounded
                    except Exception as e:
                        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω—ã {key}: {value} ‚Äî {e}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ü–µ–Ω –∏–∑ Redis: {e}")
        await asyncio.sleep(1)                           
# üî∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
async def handle_task(task_data: dict, db_pool):
    strategy_name = task_data.get("strategy")
    strategy = strategies.get(strategy_name)

    if not strategy:
        logging.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {strategy_name}")
        return

    interface = StrategyInterface(
        redis_client=redis_client,
        db_pool=db_pool,
        strategies_cache=strategies_cache,
        strategy_allowed_tickers=strategy_allowed_tickers,
        open_positions=open_positions,
        tickers_storage=tickers_storage,
        latest_prices=latest_prices
    )

    # üîπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    ok, note = await interface.run_basic_checks(task_data)
    logging.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: {ok}, –ü—Ä–∏—á–∏–Ω–∞: {note}")

    if not ok:
        strategy_id = await interface.get_strategy_id_by_name(strategy_name)
        log_id = int(task_data.get("log_id"))

        await interface.log_strategy_action(
            strategy_id=strategy_id,
            log_id=log_id,
            status="ignored_by_check",
            note=note
        )
        return

    # üîπ –í—ã–∑–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
    try:
        await asyncio.wait_for(
            strategy.on_signal(task_data, interface),
            timeout=10  # ‚Üê –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 10 —Å–µ–∫—É–Ω–¥
        )
    except asyncio.TimeoutError:
        logging.error(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{strategy_name}' –ø—Ä–µ–≤—ã—à–µ–Ω–æ (—Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫)")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
        
# üî∏ –°–ª—É—à–∞—Ç–µ–ª—å –∑–∞–¥–∞—á –∏–∑ Redis Stream
async def listen_strategy_tasks(db_pool):
    group_name = "strategy_group"
    consumer_name = "strategy_worker"
    stream_name = "strategy_tasks"

    try:
        await redis_client.xgroup_create(name=stream_name, groupname=group_name, id="0", mkstream=True)
        logging.info("‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞.")
    except ResponseError as e:
        if "BUSYGROUP" in str(e):
            logging.info("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            raise

    while True:
        try:
            entries = await redis_client.xreadgroup(
                groupname=group_name,
                consumername=consumer_name,
                streams={stream_name: ">"},
                count=10,
                block=500
            )
            for stream, messages in entries:
                for msg_id, msg_data in messages:
                    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {msg_data}")

                    try:
                        await handle_task(msg_data, db_pool)
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏: {e}")
                    finally:
                        await redis_client.xack(stream_name, group_name, msg_id)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ Redis Stream: {e}")
            await asyncio.sleep(1)
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –±–∞–∑—ã
async def load_strategies(db_pool):
    global strategies_cache

    try:
        async with db_pool.acquire() as conn:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            rows = await conn.fetch("""
                SELECT *
                FROM strategies_v2
                WHERE enabled = true AND archived = false
            """)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º TP-—É—Ä–æ–≤–Ω–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            tp_levels = await conn.fetch("""
                SELECT *
                FROM strategy_tp_levels_v2
            """)

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º TP-—É—Ä–æ–≤–Ω–∏ –ø–æ strategy_id
            tp_levels_by_strategy = {}
            for row in tp_levels:
                sid = row["strategy_id"]
                tp_levels_by_strategy.setdefault(sid, []).append(dict(row))

            # –ó–∞–≥—Ä—É–∂–∞–µ–º SL-–ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ TP
            tp_sl_rules = await conn.fetch("""
                SELECT *
                FROM strategy_tp_sl_v2
            """)

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º SL-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ strategy_id
            tp_sl_by_strategy = {}
            for row in tp_sl_rules:
                sid = row["strategy_id"]
                tp_sl_by_strategy.setdefault(sid, []).append(dict(row))

        # –§–æ—Ä–º–∏—Ä—É–µ–º strategies_cache
        strategies_cache = {}
        for row in rows:
            sid = row["id"]
            strategy_dict = dict(row)
            strategy_dict["tp_levels"] = tp_levels_by_strategy.get(sid, [])
            strategy_dict["tp_sl_rules"] = tp_sl_by_strategy.get(sid, [])
            strategies_cache[sid] = strategy_dict

        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(strategies_cache)}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã
async def load_open_positions(db_pool):
    global open_positions

    try:
        async with db_pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT *
                FROM positions_v2
                WHERE status = 'open'
            """)

        open_positions = {
            row["id"]: dict(row) for row in rows
        }

        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")                          
# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
async def main():
    logging.info("üöÄ Strategy Worker (v3) –∑–∞–ø—É—â–µ–Ω.")

    # üîπ –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ PostgreSQL
    db_pool = await asyncpg.create_pool(DATABASE_URL)
    logging.info("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ PostgreSQL —Å–æ–∑–¥–∞–Ω")

    # üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â
    await load_tickers(db_pool)
    await load_strategies(db_pool)
    await load_strategy_tickers(db_pool)
    await load_open_positions(db_pool)

    # üîπ –§–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–º–∏)
    asyncio.create_task(refresh_all_periodically(db_pool))
    asyncio.create_task(monitor_prices())

    # üîπ –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –∑–∞–¥–∞—á (–ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
    await listen_strategy_tasks(db_pool)
    
if __name__ == "__main__":
    asyncio.run(main())
# üî∏ –ò–º–ø–æ—Ä—Ç—ã –∏ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
import asyncio
import logging

from interface import StrategyInterface

logging.basicConfig(level=logging.INFO)

# üî∏ –•—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–∞–º—è—Ç–∏
tickers_storage = {}
open_positions = {}
latest_prices = {}

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ë–î
async def load_tickers():
    interface = StrategyInterface()
    global tickers_storage
    tickers_storage = await interface.load_tickers()
    logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers_storage)}")

# üî∏ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤
async def refresh_tickers_periodically():
    while True:
        try:
            await load_tickers()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {e}")
        await asyncio.sleep(300)

# üî∏ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)
async def monitor_prices():
    while True:
        await asyncio.sleep(1)

# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
async def listen_strategy_tasks():
    while True:
        await asyncio.sleep(1)

# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
async def main():
    logging.info("üöÄ Strategy Worker (v3) –∑–∞–ø—É—â–µ–Ω.")
    await load_tickers()
    asyncio.create_task(refresh_tickers_periodically())
    asyncio.create_task(monitor_prices())
    await listen_strategy_tasks()

if __name__ == "__main__":
    asyncio.run(main())
import logging
from decimal import Decimal, ROUND_DOWN
from debug_utils import debug_log

# üî∏ –°—Ç—Ä–∞—Ç–µ–≥–∏—è strategy_8_2
class Strategy8_2:
    def __init__(self):
        pass

    # üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ strategy_8_2 (M5 / EMA50 ¬± ATR, RSI, MFI, —É–≥–æ–ª LR)
    async def on_signal(self, task: dict, interface):
        debug_log("üìà –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ strategy_8_2 (M5 / EMA + ATR + RSI + MFI + LR50)")

        symbol = task["symbol"]
        direction = task["direction"]
        timeframe = "M5"
        entry_price = interface.latest_prices.get(symbol)

        if entry_price is None:
            logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}")
            return

        # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        ema_50 = await interface.get_indicator_value(symbol, timeframe, "EMA", "50")
        atr = await interface.get_indicator_value(symbol, timeframe, "ATR", "atr")
        rsi = await interface.get_indicator_value(symbol, timeframe, "RSI", "14")
        mfi = await interface.get_indicator_value(symbol, timeframe, "MFI", "14")
        lr_angle = await interface.get_indicator_value(symbol, timeframe, "LR", "lr_angle")

        if None in (ema_50, atr, rsi, mfi, lr_angle):
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: EMA, ATR, RSI, MFI, LR")
            return

        # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞
        if direction == "long":
#             threshold = ema_50 - (atr * Decimal("0.5"))
#             if entry_price <= threshold:
#                 debug_log(f"‚õî –í—Ö–æ–¥ –≤ long –∑–∞–ø—Ä–µ—â—ë–Ω: —Ü–µ–Ω–∞ {entry_price} <= {threshold}")
#                 return
#             if rsi >= Decimal("50"):
#                 debug_log(f"‚õî –í—Ö–æ–¥ –≤ long –∑–∞–ø—Ä–µ—â—ë–Ω: RSI {rsi} >= 50")
#                 return
#             if mfi >= Decimal("50"):
#                 debug_log(f"‚õî –í—Ö–æ–¥ –≤ long –∑–∞–ø—Ä–µ—â—ë–Ω: MFI {mfi} >= 50")
#                 return
            if lr_angle <= Decimal("0.02"):
                debug_log(f"‚õî –í—Ö–æ–¥ –≤ long –∑–∞–ø—Ä–µ—â—ë–Ω: —É–≥–æ–ª LR50 {lr_angle} <= 0.02")
                return

        elif direction == "short":
#             threshold = ema_50 + (atr * Decimal("0.5"))
#             if entry_price >= threshold:
#                 debug_log(f"‚õî –í—Ö–æ–¥ –≤ short –∑–∞–ø—Ä–µ—â—ë–Ω: —Ü–µ–Ω–∞ {entry_price} >= {threshold}")
#                 return
#             if rsi <= Decimal("50"):
#                 debug_log(f"‚õî –í—Ö–æ–¥ –≤ short –∑–∞–ø—Ä–µ—â—ë–Ω: RSI {rsi} <= 50")
#                 return
#             if mfi <= Decimal("50"):
#                 debug_log(f"‚õî –í—Ö–æ–¥ –≤ short –∑–∞–ø—Ä–µ—â—ë–Ω: MFI {mfi} <= 50")
#                 return
            if lr_angle <= Decimal("-0.02"):
                debug_log(f"‚õî –í—Ö–æ–¥ –≤ short –∑–∞–ø—Ä–µ—â—ë–Ω: —É–≥–æ–ª LR50 {lr_angle} >= 0.02")
                return

        # üîπ –†–∞—Å—á—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–∏
        result = await interface.calculate_position_size(task)

        if result is None:
            logging.warning("‚ö†Ô∏è –†–∞—Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî –ø–æ–∑–∏—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞")
            return

        debug_log(f"üìä –†–∞—Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–∏ (strategy_8_2): "
                     f"qty={result['quantity']}, notional={result['notional_value']}, "
                     f"risk={result['planned_risk']}, margin={result['margin_used']}, "
                     f"sl={result['stop_loss_price']}")

        # üîπ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–∞–∑–µ
        position_id = await interface.open_position(task, result)

        if position_id:
            debug_log(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ strategy_8_2, ID={position_id}")
        else:
            logging.warning("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
import asyncio
import logging
import json
import os
import redis.asyncio as redis
from redis.exceptions import ResponseError
from decimal import Decimal, ROUND_DOWN
from datetime import datetime
from debug_utils import debug_log
import asyncpg


# üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")
DATABASE_URL = os.getenv("DATABASE_URL")

# üîß Redis –∫–ª–∏–µ–Ω—Ç
redis_client = redis.Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    password=REDIS_PASSWORD,
    decode_responses=True,
    ssl=True
)

# üîß –ì—Ä—É–ø–ø–∞ –∏ –ø–æ—Ç–æ–∫
STREAM_NAME = "position:close"
GROUP_NAME = "position_closer"
CONSUMER_NAME = "position_closer_worker"

# üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è consumer group
async def init_stream():
    try:
        await redis_client.xgroup_create(name=STREAM_NAME, groupname=GROUP_NAME, id="0", mkstream=True)
        logging.info("‚úÖ –ì—Ä—É–ø–ø–∞ position_closer —Å–æ–∑–¥–∞–Ω–∞")
    except ResponseError as e:
        if "BUSYGROUP" in str(e):
            logging.info("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            raise

# üîÅ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
async def listen_close_tasks(db_pool):
    while True:
        try:
            entries = await redis_client.xreadgroup(
                groupname=GROUP_NAME,
                consumername=CONSUMER_NAME,
                streams={STREAM_NAME: ">"},
                count=10,
                block=1000
            )

            for stream, messages in entries:
                for msg_id, data in messages:
                    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {data}")
                    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
                    await redis_client.xack(STREAM_NAME, GROUP_NAME, msg_id)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
            await asyncio.sleep(1)

# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
async def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ position_close_worker")
    await init_stream()
    db_pool = await asyncpg.create_pool(DATABASE_URL)
    await listen_close_tasks(db_pool)

if __name__ == "__main__":
    asyncio.run(main())
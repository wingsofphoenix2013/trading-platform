import logging
from decimal import Decimal, ROUND_DOWN
from datetime import datetime
from debug_utils import debug_log

# üî∏ –°—Ç—Ä–∞—Ç–µ–≥–∏—è strategy_5_3 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π EMA50, RSI, MFI + —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ SL/MFI
class Strategy5_3:
    def __init__(self):
        pass

    # üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ strategy_5_3 (—Ç–∞–π–º—Ñ—Ä–µ–π–º M5, —Ñ–∏–ª—å—Ç—Ä—ã EMA + RSI + MFI + SL-–∑–∞—â–∏—Ç–∞)
    async def on_signal(self, task: dict, interface):
        debug_log("üìà –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ strategy_5_3 (M5 / EMA + RSI + MFI + SL-—Ñ–∏–ª—å—Ç—Ä)")

        symbol = task["symbol"]
        direction = task["direction"]
        timeframe = "M5"

        # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
        entry_price = interface.latest_prices.get(symbol)
        if entry_price is None:
            logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}")
            return
        entry_price = Decimal(str(entry_price))

        # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ EMA50, RSI, MFI
        ema_50 = await interface.get_indicator_value(symbol, timeframe, "EMA", "50")
        rsi = await interface.get_indicator_value(symbol, timeframe, "RSI", "14")
        mfi = await interface.get_indicator_value(symbol, timeframe, "MFI", "14")

        if ema_50 is None or rsi is None or mfi is None:
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: EMA50, RSI, MFI")
            return

        # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞
        if direction == "long":
            if entry_price >= ema_50:
                debug_log(f"‚õî –í—Ö–æ–¥ –≤ long –∑–∞–ø—Ä–µ—â—ë–Ω: —Ü–µ–Ω–∞ {entry_price} >= EMA50 {ema_50}")
                return
            if rsi >= Decimal("40"):
                debug_log(f"‚õî –í—Ö–æ–¥ –≤ long –∑–∞–ø—Ä–µ—â—ë–Ω: RSI {rsi} >= 40")
                return
            if mfi >= Decimal("25"):
                debug_log(f"‚õî –í—Ö–æ–¥ –≤ long –∑–∞–ø—Ä–µ—â—ë–Ω: MFI {mfi} >= 25")
                return

#             # üî∏ –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π long-—Å–¥–µ–ª–∫–∏ –ø–æ SL –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è MFI
#             last_close_time = await interface.get_last_sl_close_time(symbol, "long")
#             if last_close_time is not None:
#                 signal_time = datetime.fromisoformat(task.get("sent_at") or task["bar_time"])
#                 mfi_values = await interface.get_mfi_values_between(symbol, last_close_time, signal_time)
#                 logging.info(f"üìä LONG SL-–∑–∞—â–∏—Ç–∞ [{symbol}]: –Ω–∞–π–¥–µ–Ω–æ {len(mfi_values)} –∑–Ω–∞—á–µ–Ω–∏–π MFI –º–µ–∂–¥—É {last_close_time} –∏ {signal_time}")
#                 if not mfi_values:
#                     logging.info(f"‚ö†Ô∏è MFI –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ SL-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ {symbol} ‚Äî —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–ø—É—â–µ–Ω")
#                 else:
#                     mfi_max = max(mfi_values)
#                     logging.info(f"üìä MFI –º–∞–∫—Å–∏–º—É–º –ø–æ {symbol}: {mfi_max}")
#                     if mfi_max <= Decimal("35"):
#                         logging.info(f"‚õî –í—Ö–æ–¥ –≤ long –ø–æ {symbol} –æ—Ç–∫–ª–æ–Ω—ë–Ω: –ø–æ—Å–ª–µ SL MFI –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–æ–¥–Ω–∏–º–∞–ª—Å—è –≤—ã—à–µ 35")
#                         return

        elif direction == "short":
            if entry_price <= ema_50:
                debug_log(f"‚õî –í—Ö–æ–¥ –≤ short –∑–∞–ø—Ä–µ—â—ë–Ω: —Ü–µ–Ω–∞ {entry_price} <= EMA50 {ema_50}")
                return
            if rsi <= Decimal("60"):
                debug_log(f"‚õî –í—Ö–æ–¥ –≤ short –∑–∞–ø—Ä–µ—â—ë–Ω: RSI {rsi} <= 60")
                return
            if mfi <= Decimal("75"):
                debug_log(f"‚õî –í—Ö–æ–¥ –≤ short –∑–∞–ø—Ä–µ—â—ë–Ω: MFI {mfi} <= 75")
                return

#             # üî∏ –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π short-—Å–¥–µ–ª–∫–∏ –ø–æ SL –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è MFI
#             last_close_time = await interface.get_last_sl_close_time(symbol, "short")
#             if last_close_time is not None:
#                 signal_time = datetime.fromisoformat(task.get("sent_at") or task["bar_time"])
#                 mfi_values = await interface.get_mfi_values_between(symbol, last_close_time, signal_time)
#                 logging.info(f"üìä SHORT SL-–∑–∞—â–∏—Ç–∞ [{symbol}]: –Ω–∞–π–¥–µ–Ω–æ {len(mfi_values)} –∑–Ω–∞—á–µ–Ω–∏–π MFI –º–µ–∂–¥—É {last_close_time} –∏ {signal_time}")
#                 if not mfi_values:
#                     logging.info(f"‚ö†Ô∏è MFI –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ SL-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ {symbol} ‚Äî —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–ø—É—â–µ–Ω")
#                 else:
#                     mfi_min = min(mfi_values)
#                     logging.info(f"üìä MFI –º–∏–Ω–∏–º—É–º –ø–æ {symbol}: {mfi_min}")
#                     if mfi_min >= Decimal("65"):
#                         logging.info(f"‚õî –í—Ö–æ–¥ –≤ short –ø–æ {symbol} –æ—Ç–∫–ª–æ–Ω—ë–Ω: –ø–æ—Å–ª–µ SL MFI –Ω–∏ —Ä–∞–∑—É –Ω–µ –æ–ø—É—Å–∫–∞–ª—Å—è –Ω–∏–∂–µ 65")
#                         return

        # üîπ –†–∞—Å—á—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–∏
        result = await interface.calculate_position_size(task)

        if result is None:
            logging.warning("‚ö†Ô∏è –†–∞—Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî –ø–æ–∑–∏—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞")
            return

        debug_log(f"üìä –†–∞—Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–∏ (strategy_5_3): "
                  f"qty={result['quantity']}, notional={result['notional_value']}, "
                  f"risk={result['planned_risk']}, margin={result['margin_used']}, "
                  f"sl={result['stop_loss_price']}")

        # üîπ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–∞–∑–µ
        position_id = await interface.open_position(task, result)

        if position_id:
            debug_log(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ strategy_5_3, ID={position_id}")
        else:
            logging.warning("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
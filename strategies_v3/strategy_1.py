import logging
from decimal import Decimal, ROUND_DOWN

# üî∏ –°—Ç—Ä–∞—Ç–µ–≥–∏—è strategy_1 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π EMA50 –∏ ATR
class Strategy1:
    def __init__(self):
        pass

    # üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —Å —É—á—ë—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π
    async def on_signal(self, task: dict, interface):
        debug_log("üìà –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≤–Ω—É—Ç—Ä–∏ strategy_1...")

        symbol = task["symbol"]
        direction = task["direction"]
        timeframe = task.get("timeframe", "M1")
        entry_price = interface.latest_prices.get(symbol)

        if entry_price is None:
            logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}")
            return

        # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ EMA50 –∏ ATR
        ema_50 = await interface.get_indicator_value(symbol, timeframe, "EMA", "50")
        atr = await interface.get_indicator_value(symbol, timeframe, "ATR", "atr")

        if ema_50 is None or atr is None:
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å EMA50 –∏–ª–∏ ATR")
            return

        # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞
        if direction == "long":
            threshold = ema_50 - (atr * Decimal("0.5"))
            if entry_price < threshold:
                debug_log(f"‚õî –í—Ö–æ–¥ –≤ long –∑–∞–ø—Ä–µ—â—ë–Ω: —Ü–µ–Ω–∞ {entry_price} < {threshold}")
                return

        elif direction == "short":
            threshold = ema_50 + (atr * Decimal("0.5"))
            if entry_price > threshold:
                debug_log(f"‚õî –í—Ö–æ–¥ –≤ short –∑–∞–ø—Ä–µ—â—ë–Ω: —Ü–µ–Ω–∞ {entry_price} > {threshold}")
                return

        # üîπ –†–∞—Å—á—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–∏
        result = await interface.calculate_position_size(task)

        if result is None:
            logging.warning("‚ö†Ô∏è –†–∞—Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî –ø–æ–∑–∏—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞")
            return

        debug_log(f"üìä –†–∞—Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–∏ (strategy_1): "
                     f"qty={result['quantity']}, notional={result['notional_value']}, "
                     f"risk={result['planned_risk']}, margin={result['margin_used']}, "
                     f"sl={result['stop_loss_price']}")

        # üîπ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–∞–∑–µ
        position_id = await interface.open_position(task, result)

        if position_id:
            debug_log(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ strategy_1, ID={position_id}")
        else:
            logging.warning("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
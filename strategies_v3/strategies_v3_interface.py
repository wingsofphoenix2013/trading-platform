# üî∏ –ò–º–ø–æ—Ä—Ç—ã –∏ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
import os
import asyncpg
import redis.asyncio as redis
from decimal import Decimal, ROUND_DOWN

# üî∏ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π v3
class StrategyInterface:
    def __init__(self):
        self.pg_dsn = os.getenv("DATABASE_URL")
        self._pg_pool = None
        self._redis = None

    # üî∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis (Upstash / –ª–æ–∫–∞–ª—å–Ω–æ)
    async def get_redis(self):
        if not self._redis:
            host = os.getenv("REDIS_HOST")
            port = int(os.getenv("REDIS_PORT", "6379"))
            password = os.getenv("REDIS_PASSWORD")
            self._redis = redis.Redis(
                host=host,
                port=port,
                password=password,
                decode_responses=True,
                ssl=True
            )
        return self._redis

    # üî∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–ª–∞ PostgreSQL
    async def get_pg(self):
        if not self._pg_pool:
            self._pg_pool = await asyncpg.create_pool(dsn=self.pg_dsn, min_size=1, max_size=5)
        return self._pg_pool
        
    # üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ —Å precision
    async def load_tickers(self):
        pg = await self.get_pg()
        query = """
        SELECT symbol, precision_price, precision_qty, min_qty, tradepermission
        FROM tickers
        WHERE status = 'enabled'
        """
        rows = await pg.fetch(query)
        return {
            row["symbol"]: {
                "precision_price": row["precision_price"],
                "precision_qty": row["precision_qty"],
                "min_qty": row["min_qty"],
                "tradepermission": row["tradepermission"],
            }
            for row in rows
        }

    # üî∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async def get_strategy_params(self, strategy_name: str):
        pg = await self.get_pg()
        row = await pg.fetchrow("""
            SELECT * FROM strategies_v2 WHERE name = $1 AND enabled = true AND archived = false
        """, strategy_name)
        return dict(row) if row else None
      
    # üî∏ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async def log_strategy_action(self, *, log_id: int, strategy_id: int, status: str, position_id: int = None, note: str = None):
        pg = await self.get_pg()
        await pg.execute("""
            INSERT INTO signal_log_entries_v2 (log_id, strategy_id, status, position_id, note)
            VALUES ($1, $2, $3, $4, $5)
        """, log_id, strategy_id, status, position_id, note)
        
    # üî∏ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ + –≤ –ë–î)
    async def disable_symbol_for_strategy(self, strategy_name: str, symbol: str):
        pg = await self.get_pg()

        # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy_row = await pg.fetchrow(
            "SELECT id FROM strategies_v2 WHERE name = $1", strategy_name
        )
        if not strategy_row:
            raise ValueError(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {strategy_name}")
        strategy_id = strategy_row["id"]

        # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–∏–∫–µ—Ä–∞
        ticker_row = await pg.fetchrow(
            "SELECT id FROM tickers WHERE symbol = $1", symbol
        )
        if not ticker_row:
            raise ValueError(f"–¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {symbol}")
        ticker_id = ticker_row["id"]

        # üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ strategy_tickers_v2
        await pg.execute("""
            UPDATE strategy_tickers_v2
            SET enabled = false
            WHERE strategy_id = $1 AND ticker_id = $2
        """, strategy_id, ticker_id)

        # üîπ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
        from strategies_v3_main import allowed_symbols
        allowed_symbols.get(strategy_name, set()).discard(symbol)
                
    # üî∏ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: —Ä–∞—Å—á—ë—Ç –æ–±—ä—ë–º–∞ –∏ –∑–∞–ø–∏—Å—å –≤ –ë–î
    async def open_position(self, strategy_name: str, symbol: str, direction: str, entry_price: float, log_id: int) -> int:
        from strategies_v3_main import tickers_storage, open_positions, strategies_cache

        pg = await self.get_pg()

        # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy = strategies_cache[strategy_name]
        leverage = strategy["leverage"]
        deposit = Decimal(strategy["deposit"])
        position_limit = Decimal(strategy["position_limit"])
        max_risk_pct = Decimal(strategy["max_risk"])
        sl_type = strategy["sl_type"]
        sl_value = Decimal(strategy["sl_value"])

        # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ precision –ø–æ —Ç–∏–∫–µ—Ä—É
        ticker = tickers_storage[symbol]
        precision_price = ticker["precision_price"]
        precision_qty = ticker["precision_qty"]

        # üîπ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
        entry_price = Decimal(entry_price).quantize(Decimal(f"1e-{precision_price}"))

        # üîπ –†–∞—Å—á—ë—Ç SL-—Ü–µ–Ω—ã
        if sl_type == "percent":
            if direction == "long":
                sl_price = entry_price * (Decimal("1") - sl_value / Decimal("100"))
            else:
                sl_price = entry_price * (Decimal("1") + sl_value / Decimal("100"))
            sl_price = sl_price.quantize(Decimal(f"1e-{precision_price}"))
        elif sl_type == "atr":
            raise NotImplementedError("SL –ø–æ ATR –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø SL: {sl_type}")

        delta = abs(entry_price - sl_price)
        if delta == 0:
            raise ValueError("SL-—É—Ä–æ–≤–µ–Ω—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—Ö–æ–¥–æ–º ‚Äî –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∏—Å–∫")

        # üîπ –†–∞—Å—á—ë—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∏—Å–∫–∞
        max_risk_abs = deposit * max_risk_pct / Decimal("100")

        # üîπ –†–∞—Å—á—ë—Ç —É–∂–µ –∑–∞–Ω—è—Ç–æ–≥–æ —Ä–∏—Å–∫–∞
        total_existing_risk = sum(
            pos["planned_risk"] for pos in open_positions.values()
            if pos["strategy"] == strategy_name
        )
        remaining_risk = max_risk_abs - total_existing_risk
        if remaining_risk <= 0:
            raise ValueError("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∏—Å–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

        # üîπ –†–∞—Å—á—ë—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±—ä—ë–º–∞
        quantity = remaining_risk / delta

        # üîπ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ position_limit (–º–∞—Ä–∂–∞)
        max_quantity_by_limit = position_limit / entry_price
        quantity = min(quantity, max_quantity_by_limit)

        # üîπ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –æ–±—ä—ë–º–∞
        quantity = quantity.quantize(Decimal(f"1e-{precision_qty}"), rounding=ROUND_DOWN)

        # üîπ –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        notional_value = (quantity * entry_price).quantize(Decimal("1.0000"))
        planned_risk = (delta * quantity).quantize(Decimal("1.0000"))

        # üîπ –ö–æ–º–∏—Å—Å–∏—è
        commission_rate = Decimal("0.001")
        commission = (notional_value * commission_rate).quantize(Decimal("1.0000"))
        pnl = -commission

        # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ strategy_id
        strategy_id = strategy["id"]

        # üîπ –í—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–∑–∏—Ü–∏–π
        result = await pg.fetchrow("""
            INSERT INTO positions_v2 (
                strategy_id, log_id, symbol, direction,
                entry_price, quantity, notional_value,
                quantity_left, status, created_at,
                planned_risk, pnl
            ) VALUES (
                $1, $2, $3, $4,
                $5, $6, $7,
                $6, 'open', NOW(),
                $8, $9
            )
            RETURNING id
        """, strategy_id, log_id, symbol, direction,
             entry_price, quantity, notional_value,
             planned_risk, pnl)

        position_id = result["id"]

        # üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        open_positions[(strategy_name, symbol)] = {
            "position_id": position_id,
            "strategy": strategy_name,
            "symbol": symbol,
            "direction": direction,
            "entry_price": entry_price,
            "quantity": quantity,
            "quantity_left": quantity,
            "planned_risk": planned_risk,
            "pnl": pnl
        }

        return position_id
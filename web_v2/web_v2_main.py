import os
import logging
from pathlib import Path
from datetime import datetime
import asyncpg
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.responses import RedirectResponse
from fastapi.templating import Jinja2Templates
import redis.asyncio as redis

# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()

# üî∏ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —à–∞–±–ª–æ–Ω–∞–º (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Render)
BASE_DIR = Path(__file__).resolve().parent
templates = Jinja2Templates(directory=str(BASE_DIR / "templates"))

# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")

redis_client = redis.Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    password=REDIS_PASSWORD,
    decode_responses=True,
    ssl=True
)

# üî∏ –ü—Ä–∏—ë–º —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç TradingView (—Ñ–æ—Ä–º–∞—Ç JSON)
# –û–∂–∏–¥–∞–µ—Ç—Å—è: message, symbol, time (–±–∞—Ä), sent_at (–≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏)
@app.post("/webhook_v2")
async def webhook_v2(request: Request):
    try:
        payload = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")

    # üîπ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π —Å–∏–≥–Ω–∞–ª–∞
    message = payload.get("message")
    symbol = payload.get("symbol")
    bar_time = payload.get("time")
    sent_at = payload.get("sent_at")

    if not message or not symbol:
        raise HTTPException(status_code=422, detail="Missing 'message' or 'symbol'")

    # üîπ –¢–µ–∫—É—â–µ–µ UTC-–≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ —Å–∏–≥–Ω–∞–ª–∞
    received_at = datetime.utcnow().isoformat()

    # üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
    logging.info(f"Webhook V2: {message} | {symbol} | bar_time={bar_time} | sent_at={sent_at}")

    # üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Redis Stream (–Ω–∞–∑–≤–∞–Ω–∏–µ: signals_stream)
    await redis_client.xadd("signals_stream", {
        "message": message,
        "symbol": symbol,
        "bar_time": bar_time or "",
        "sent_at": sent_at or "",
        "received_at": received_at
    })

    # üîπ –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    return JSONResponse({"status": "ok", "received_at": received_at})
    
# üî∏ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# üî∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–∏–∫–µ—Ä–æ–≤
@app.get("/tickers", response_class=HTMLResponse)
async def tickers(request: Request):
    return templates.TemplateResponse("tickers.html", {"request": request})

# üî∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
@app.get("/indicators", response_class=HTMLResponse)
async def indicators(request: Request):
    return templates.TemplateResponse("indicators.html", {"request": request})

# üî∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
@app.get("/signals", response_class=HTMLResponse)
async def signals(request: Request):
    return templates.TemplateResponse("signals.html", {"request": request})

# üî∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
@app.get("/strategies", response_class=HTMLResponse)
async def strategies(request: Request):
    return templates.TemplateResponse("strategies.html", {"request": request})

# üî∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—Ñ–æ—Ä–º–∞ + —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤/—Ç–∏–∫–µ—Ä–æ–≤)
@app.get("/strategies/new", response_class=HTMLResponse)
async def strategy_new(request: Request):
    conn = await asyncpg.connect(os.getenv("DATABASE_URL"))
    try:
        signals = await conn.fetch("""
            SELECT id, name, signal_type, enabled
            FROM signals_v2
            WHERE signal_type = 'action'
            ORDER BY name
        """)

        tickers = await conn.fetch("""
            SELECT symbol, status, tradepermission
            FROM tickers
            WHERE status = 'enabled' AND tradepermission = 'enabled'
            ORDER BY symbol
        """)

        return templates.TemplateResponse("strategies_new.html", {
            "request": request,
            "signals": signals,
            "tickers": tickers
        })
    finally:
        await conn.close()
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (POST /strategies/new)
@app.post("/strategies/new")
async def create_strategy(request: Request):
    form = await request.form()
    conn = await asyncpg.connect(os.getenv("DATABASE_URL"))
    try:
        # üîπ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        name = form.get("name")
        description = form.get("description")
        deposit = float(form.get("deposit") or 0)
        position_limit = float(form.get("position_limit") or 0)
        max_risk = int(form.get("max_risk") or 0)
        leverage = float(form.get("leverage") or 1)
        timeframe = form.get("timeframe")
        use_stoploss = "use_stoploss" in form
        sl_type = form.get("sl_type")
        sl_value = float(form.get("sl_value") or 0)
        reverse = "reverse" in form
        use_all_tickers = "use_all_tickers" in form
        action_signal_id = int(form.get("action_signal_id") or 0)

        # üîπ –í—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        result = await conn.fetchrow("""
            INSERT INTO strategies_v2 (
              name, description, deposit, position_limit, max_risk, leverage,
              use_stoploss, sl_type, sl_value, reverse, use_all_tickers,
              timeframe, allow_open, enabled, archived
            )
            VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12, true, false, false)
            RETURNING id
        """, name, description, deposit, position_limit, max_risk, leverage,
             use_stoploss, sl_type, sl_value, reverse, use_all_tickers, timeframe)
        strategy_id = result["id"]

        # üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        if action_signal_id > 0:
            await conn.execute("""
                INSERT INTO strategy_signals_v2 (strategy_id, signal_id, role)
                VALUES ($1, $2, 'action')
            """, strategy_id, action_signal_id)

        # üîπ –ü—Ä–∏–≤—è–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –ø—Ä–∏ use_all_tickers = false
        if not use_all_tickers:
            for key in form:
                if key.startswith("ticker_") and form.get(key) == "on":
                    symbol = key.replace("ticker_", "")
                    ticker = await conn.fetchrow("SELECT id FROM tickers WHERE symbol = $1", symbol)
                    if ticker:
                        await conn.execute("""
                            INSERT INTO strategy_tickers_v2 (strategy_id, ticker_id, enabled)
                            VALUES ($1, $2, true)
                        """, strategy_id, ticker["id"])

        return RedirectResponse(url="/strategies", status_code=302)
    finally:
        await conn.close()              
import os
import logging
from pathlib import Path
from datetime import datetime

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.templating import Jinja2Templates
import redis.asyncio as redis

# üî∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()

# üî∏ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —à–∞–±–ª–æ–Ω–∞–º (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Render)
BASE_DIR = Path(__file__).resolve().parent
templates = Jinja2Templates(directory=str(BASE_DIR / "templates"))

# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")

redis_client = redis.Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    password=REDIS_PASSWORD,
    decode_responses=True,
    ssl=True
)

# üî∏ –ü—Ä–∏—ë–º —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç TradingView (—Ñ–æ—Ä–º–∞—Ç JSON)
# –û–∂–∏–¥–∞–µ—Ç—Å—è: message, symbol, time (–±–∞—Ä), sent_at (–≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏)
@app.post("/webhook_v2")
async def webhook_v2(request: Request):
    try:
        payload = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")

    # üîπ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π —Å–∏–≥–Ω–∞–ª–∞
    message = payload.get("message")
    symbol = payload.get("symbol")
    bar_time = payload.get("time")
    sent_at = payload.get("sent_at")

    if not message or not symbol:
        raise HTTPException(status_code=422, detail="Missing 'message' or 'symbol'")

    # üîπ –¢–µ–∫—É—â–µ–µ UTC-–≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ —Å–∏–≥–Ω–∞–ª–∞
    received_at = datetime.utcnow().isoformat()

    # üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
    logging.info(f"Webhook V2: {message} | {symbol} | bar_time={bar_time} | sent_at={sent_at}")

    # üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Redis Stream (–Ω–∞–∑–≤–∞–Ω–∏–µ: signals_stream)
    await redis_client.xadd("signals_stream", {
        "message": message,
        "symbol": symbol,
        "bar_time": bar_time or "",
        "sent_at": sent_at or "",
        "received_at": received_at
    })

    # üîπ –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    return JSONResponse({"status": "ok", "received_at": received_at})
    
# üî∏ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# üî∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–∏–∫–µ—Ä–æ–≤
@app.get("/tickers", response_class=HTMLResponse)
async def tickers(request: Request):
    return templates.TemplateResponse("tickers.html", {"request": request})

# üî∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
@app.get("/indicators", response_class=HTMLResponse)
async def indicators(request: Request):
    return templates.TemplateResponse("indicators.html", {"request": request})

# üî∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
@app.get("/signals", response_class=HTMLResponse)
async def signals(request: Request):
    return templates.TemplateResponse("signals.html", {"request": request})

# üî∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
@app.get("/strategies", response_class=HTMLResponse)
async def strategies(request: Request):
    return templates.TemplateResponse("strategies.html", {"request": request})

# üî∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
@app.get("/strategies/new", response_class=HTMLResponse)
async def strategy_new(request: Request):
    return templates.TemplateResponse("strategies_new.html", {"request": request})        
import os
import asyncio
import logging
import redis.asyncio as redis
import asyncpg
from datetime import datetime
from dateutil import parser

# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")
DATABASE_URL = os.getenv("DATABASE_URL")

# üî∏ Redis –∫–ª–∏–µ–Ω—Ç
redis_client = redis.Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    password=REDIS_PASSWORD,
    decode_responses=True,
    ssl=True
)
# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ç–∏–∫–µ—Ä–æ–≤: symbol ‚Üí tradepermission
TICKERS = {}
# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: name ‚Üí –¥–∞–Ω–Ω—ã–µ
STRATEGIES = {}
# üî∏ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–≤—è–∑–∫–∞ —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ —Å –∏–º–µ–Ω–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
STRATEGY_SIGNALS = {}        
# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
async def get_db():
    return await asyncpg.connect(DATABASE_URL)
# üî∏ –ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É system_logs
async def log_system_event(level, message, source, details=None, action_flag=None):
    try:
        conn = await get_db()
        await conn.execute("""
            INSERT INTO system_logs (level, message, source, details, action_flag, created_at)
            VALUES ($1, $2, $3, $4, $5, NOW())
        """, level, message, source, details, action_flag)
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –≤ system_logs: {e}")
    finally:
        await conn.close()
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ë–î (status = enabled)
async def load_tickers():
    global TICKERS
    try:
        conn = await get_db()
        rows = await conn.fetch("SELECT symbol, tradepermission FROM tickers WHERE status = 'enabled'")
        TICKERS = {row["symbol"]: row["tradepermission"] for row in rows}
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤: {len(TICKERS)} —à—Ç.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ä–æ–≤: {e}")
    finally:
        await conn.close()
# üî∏ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
async def refresh_tickers_periodically():
    while True:
        await load_tickers()
        await asyncio.sleep(300)
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã strategies_v2
# –•—Ä–∞–Ω–∏—Ç –≤–∫–ª—é—á—ë–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
async def load_strategies():
    global STRATEGIES
    try:
        conn = await get_db()
        rows = await conn.fetch("""
            SELECT id, name, enabled, archived, allow_open, use_all_tickers
            FROM strategies_v2
        """)
        STRATEGIES = {
            row["name"]: {
                "id": row["id"],
                "enabled": row["enabled"],
                "archived": row["archived"],
                "allow_open": row["allow_open"],
                "use_all_tickers": row["use_all_tickers"]
            } for row in rows
        }
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(STRATEGIES)} —à—Ç.")
    except Exception as e:
        await log_system_event("ERROR", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", "signal_worker", str(e))
    finally:
        await conn.close()
# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Üî —Å–∏–≥–Ω–∞–ª –∏–∑ strategy_signals_v2
# –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ ‚Üí —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –Ω–∏—Ö –ø–æ–¥–ø–∏—Å–∞–Ω—ã
async def load_strategy_signals():
    global STRATEGY_SIGNALS
    try:
        conn = await get_db()
        rows = await conn.fetch("""
            SELECT ss.strategy_id, s.name, ss.signal_id, sv.short_phrase, sv.long_phrase
            FROM strategy_signals_v2 ss
            JOIN strategies_v2 s ON ss.strategy_id = s.id
            JOIN signals_v2 sv ON ss.signal_id = sv.id
            WHERE s.enabled = true AND s.archived = false
        """)
        signals_map = {}
        for row in rows:
            for phrase in [row["short_phrase"], row["long_phrase"]]:
                if phrase not in signals_map:
                    signals_map[phrase] = []
                signals_map[phrase].append(row["name"])
        STRATEGY_SIGNALS = signals_map
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ strategy_signals: {len(STRATEGY_SIGNALS)} —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑")
    except Exception as e:
        await log_system_event("ERROR", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ strategy_signals", "signal_worker", str(e))
    finally:
        await conn.close()
# üî∏ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ —Å–≤—è–∑–µ–π
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ UI/–∞–¥–º–∏–Ω–∫—É
async def refresh_strategies_periodically():
    while True:
        await load_strategies()
        await load_strategy_signals()
        await asyncio.sleep(300)        
# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ Redis Stream
async def process_signal(entry_id, data):
    logging.info(f"üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞: {data}")

    # üîπ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    message = data.get("message")
    symbol_raw = data.get("symbol")
    bar_time = data.get("bar_time")
    sent_at = data.get("sent_at")
    received_at = data.get("received_at")
    raw_message = str(data)

    # üîπ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not message or not symbol_raw:
        await log_system_event(
            level="WARNING",
            message="–°–∏–≥–Ω–∞–ª –±–µ–∑ message –∏–ª–∏ symbol ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω",
            source="signal_worker",
            details=raw_message
        )
        return

    symbol = symbol_raw.strip().upper()
    if symbol.endswith(".P"):
        symbol = symbol[:-2]

    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–∫–µ—Ä–∞ (–ø–æ –∫–µ—à—É)
    if symbol not in TICKERS or TICKERS[symbol] != "enabled":
        await log_system_event(
            level="WARNING",
            message=f"–¢–∏–∫–µ—Ä {symbol} –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ",
            source="signal_worker",
            details=raw_message
        )
        return

    # üîπ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    from dateutil import parser
    try:
        bar_time = parser.isoparse(bar_time).replace(tzinfo=None) if bar_time else None
        sent_at = parser.isoparse(sent_at).replace(tzinfo=None) if sent_at else None
        received_at = parser.isoparse(received_at).replace(tzinfo=None) if received_at else datetime.utcnow()
    except Exception as e:
        await log_system_event(
            level="ERROR",
            message="–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç",
            source="signal_worker",
            details=str(e)
        )
        return

    conn = await get_db()
    try:
        # üîπ –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Ñ—Ä–∞–∑–µ
        signal_row = await conn.fetchrow("""
            SELECT * FROM signals_v2
            WHERE (long_phrase = $1 OR short_phrase = $1)
              AND enabled = true
        """, message)
        if not signal_row:
            await log_system_event(
                level="WARNING",
                message=f"–§—Ä–∞–∑–∞ '{message}' –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ signals_v2",
                source="signal_worker",
                details=raw_message
            )
            return

        signal_id = signal_row["id"]
        source = signal_row["source"]
        direction = None
        if message == signal_row["long_phrase"]:
            direction = "long"
        elif message == signal_row["short_phrase"]:
            direction = "short"

        # üîπ UID —Å–∏–≥–Ω–∞–ª–∞ (message + symbol + bar_time)
        uid = f"{message}:{symbol}:{bar_time.isoformat()}"
        exists = await conn.fetchval("SELECT id FROM signals_v2_log WHERE uid = $1", uid)
        if exists:
            await log_system_event(
                level="INFO",
                message=f"–ü–æ–≤—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–∞ ‚Äî uid {uid}",
                source="signal_worker"
            )
            return

        # üîπ –í—Å—Ç–∞–≤–∫–∞ –≤ signals_v2_log
        log_id = await conn.fetchval("""
            INSERT INTO signals_v2_log (
                signal_id, symbol, direction, source, message,
                raw_message, bar_time, sent_at, received_at,
                logged_at, status, uid
            )
            VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,NOW(),'new',$10)
            RETURNING id
        """, signal_id, symbol, direction, source, message,
             raw_message, bar_time, sent_at, received_at, uid)

        logging.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –∑–∞–ø–∏—Å–∞–Ω –≤ signals_v2_log (id={log_id})")
        
        # üî∏ –ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ —Ñ—Ä–∞–∑–µ
        subscribed = STRATEGY_SIGNALS.get(message, [])
        if not subscribed:
            logging.info(f"‚ÑπÔ∏è –ù–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ {message}")
            return

        for strategy_name in subscribed:
            strat = STRATEGIES.get(strategy_name)
            if not strat:
                continue  # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞

            if not strat["enabled"] or strat["archived"] or not strat["allow_open"]:
                logging.info(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–≤—ã–∫–ª—é—á–µ–Ω–∞ / –∞—Ä—Ö–∏–≤ / –ø–∞—É–∑–∞)")
                continue

            task_payload = {
                "strategy": strategy_name,
                "symbol": symbol,
                "direction": direction,
                "bar_time": bar_time.isoformat(),
                "sent_at": sent_at.isoformat() if sent_at else "",
                "received_at": received_at.isoformat(),
                "log_id": str(log_id)
            }

            await redis_client.xadd("strategy_tasks", task_payload)
            logging.info(f"üì§ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ strategy_tasks –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}")
            
    except Exception as e:
        logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ process_signal: {e}")
        await log_system_event(
            level="ERROR",
            message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞",
            source="signal_worker",
            details=str(e)
        )
    finally:
        await conn.close()
# üî∏ –¶–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Redis Stream
async def listen_signals():
    logging.info("üöÄ Signal Worker (v2) –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    group = "workers"
    consumer = f"consumer-{os.getpid()}"

    try:
        await redis_client.xgroup_create("signals_stream", group, id="0", mkstream=True)
    except redis.ResponseError as e:
        if "BUSYGROUP" in str(e):
            logging.info("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
        else:
            raise

    while True:
        result = await redis_client.xreadgroup(
            groupname=group,
            consumername=consumer,
            streams={"signals_stream": ">"},
            count=10,
            block=500
        )

        if result:
            for stream_name, messages in result:
                for entry_id, data in messages:
                    await process_signal(entry_id, data)
                    await redis_client.xack("signals_stream", group, entry_id)

# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞: –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ + –∑–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
async def main():
    await load_tickers()
    await load_strategies()
    await load_strategy_signals()
    asyncio.create_task(refresh_tickers_periodically())
    asyncio.create_task(refresh_strategies_periodically())
    await log_system_event("INFO", "Signal Worker (v2) —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", "signal_worker")
    await listen_signals()

# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    asyncio.run(main())
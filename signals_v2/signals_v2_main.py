import os
import asyncio
import logging
import redis.asyncio as redis
import asyncpg
from datetime import datetime

# üî∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üî∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")
DATABASE_URL = os.getenv("DATABASE_URL")

# üî∏ Redis –∫–ª–∏–µ–Ω—Ç
redis_client = redis.Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    password=REDIS_PASSWORD,
    decode_responses=True,
    ssl=True
)

# üî∏ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ç–∏–∫–µ—Ä–æ–≤: symbol ‚Üí tradepermission
TICKERS = {}

# üî∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
async def get_db():
    return await asyncpg.connect(DATABASE_URL)

# üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ë–î (status = enabled)
async def load_tickers():
    global TICKERS
    try:
        conn = await get_db()
        rows = await conn.fetch("SELECT symbol, tradepermission FROM tickers WHERE status = 'enabled'")
        TICKERS = {row["symbol"]: row["tradepermission"] for row in rows}
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤: {len(TICKERS)} —à—Ç.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ä–æ–≤: {e}")
    finally:
        await conn.close()

# üî∏ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
async def refresh_tickers_periodically():
    while True:
        await load_tickers()
        await asyncio.sleep(300)

# üî∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ –ø–æ—Ç–æ–∫–∞
async def process_signal(entry_id, data):
    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∏–∑ Redis Stream: {data}")
    # TODO: –ø–∞—Ä—Å–∏–Ω–≥, –ø—Ä–æ–≤–µ—Ä–∫–∞ message –∏ symbol, —Å–≤–µ—Ä–∫–∞ —Å TICKERS, –∑–∞–ø–∏—Å—å –≤ –ë–î

# üî∏ –¶–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Redis Stream
async def listen_signals():
    logging.info("üöÄ Signal Worker (v2) –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    group = "workers"
    consumer = f"consumer-{os.getpid()}"

    try:
        await redis_client.xgroup_create("signals_stream", group, id="0", mkstream=True)
    except redis.ResponseError as e:
        if "BUSYGROUP" in str(e):
            logging.info("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
        else:
            raise

    while True:
        result = await redis_client.xreadgroup(
            groupname=group,
            consumername=consumer,
            streams={"signals_stream": ">"},
            count=10,
            block=500
        )

        if result:
            for stream_name, messages in result:
                for entry_id, data in messages:
                    await process_signal(entry_id, data)
                    await redis_client.xack("signals_stream", group, entry_id)

# üî∏ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞: –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ + –∑–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
async def main():
    await load_tickers()
    asyncio.create_task(refresh_tickers_periodically())
    await listen_signals()

# üî∏ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    asyncio.run(main())